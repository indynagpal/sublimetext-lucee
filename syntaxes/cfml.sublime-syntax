%YAML1.2
---
# Started with https://github.com/SublimeText/ColdFusion
name: CFML
file_extensions:
  - cfml
  - cfm
  - cfc
scope: embedding.cfml
contexts:
  main:
    - match: (?i)(?=^\s*(/\*|//|import\b|(component|interface)(\s+|{)))
      push: scope:source.cfml.script
    - include: comments
    - match: (?i)(?=(</?cf))
      push:
        - meta_scope: source.cfml
        - include: cfml
    - match: (?=<?!?[a-zA-Z0-9:]+)
      set: html
      with_prototype:
        - include: comments
        - match: (?i)(?=</?cf)
          push: cfml
  html:
    - meta_scope: text.html.cfml
    - include: scope:text.html.basic
  cfcomponent:
    - meta_scope: source.cfml
    - match: (?i)(</)(cfcomponent)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml storage.type.class.cfml
        3: punctuation.definition.tag.end.cfml
      pop: true
    - match: (?i)(<)(cfcomponent)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml storage.type.class.cfml
      push:
        - meta_scope: meta.tag.cfml meta.class.cfml
        - match: ">"
          scope: punctuation.definition.tag.end.cfml
          pop: true
        - match: '(?i)\b(extends)\s*(=)\s*"'
          captures:
            1: storage.modifier.extends.cfml
            2: punctuation.separator.key-value.cfml
          push:
            - meta_content_scope: meta.class.inheritance.cfml
            - match: '([_$a-zA-Z][$\w]*)'
              scope: entity.other.inherited-class.cfml
            - match: '"'
              pop: true
        - include: tag-generic-attribute
    - include: comments
    - include: cffunction
    - match: (?i)(?=</?cf)
      push: cfmltags
  cfinterface:
    - meta_scope: source.cfml
    - match: (?i)(</)(cfinterface)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml storage.type.interface.cfml
        3: punctuation.definition.tag.end.cfml
      pop: true
    - match: (?i)(<)(cfinterface)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml storage.type.interface.cfml
      push:
        - meta_scope: meta.tag.cfml meta.interface.cfml
        - match: ">"
          scope: punctuation.definition.tag.end.cfml
          pop: true
        - match: '(?i)\b(extends)\s*(=)\s*"'
          captures:
            1: storage.modifier.extends.cfml
            2: punctuation.separator.key-value.cfml
            3: entity.other.inherited-interface.cfml
          push:
            - meta_content_scope: meta.interface.inheritance.cfml
            - match: '([_$a-zA-Z][$\w]*)'
              scope: entity.other.inherited-interface.cfml
            - match: '"'
              pop: true
        - include: tag-generic-attribute
    - include: comments
    - include: cffunction
  cffunction:
    - match: (?i)(?=<cffunction)
      push:
        - match: (<)(cffunction)
          captures:
            1: punctuation.definition.tag.begin.cfml
            2: entity.name.tag.cfml storage.type.function.cfml
          push:
            - meta_scope: meta.tag.cfml meta.function.cfml
            - match: ">"
              scope: punctuation.definition.tag.end.cfml
              pop: true
            - match: '\b(name)\s*(=)\s*"([_$a-zA-Z][$\w]*)"'
              captures:
                1: entity.other.attribute-name.cfml
                2: punctuation.separator.key-value.cfml
                3: entity.name.function.cfml
            - match: '\b(access)\s*(=)\s*"([_$a-zA-Z][$\w]*)"'
              captures:
                1: entity.other.attribute-name.cfml
                2: punctuation.separator.key-value.cfml
                3: storage.modifier.cfml
            - match: |-
                (?x)(?i)
                  \b(returntype)\s*(=)\s*"(
                  (void)
                  |
                  (any|array|binary|boolean|component|date|guid|numeric|query|string|struct|xml|uuid) # return-type.primitive
                  |
                  ([A-Za-z0-9_\.$]+) #return-type component/object (may need additional tokens)
                )"
              captures:
                1: entity.other.attribute-name.cfml
                2: punctuation.separator.key-value.cfml
                3: storage.type.return-type.void.cfml
                4: storage.type.return-type.primitive.cfml
                5: storage.type.return-type.object.cfml
            - include: tag-generic-attribute
        - match: (</)(cffunction)(>)
          captures:
            0: meta.tag.cfml
            1: punctuation.definition.tag.begin.cfml
            2: entity.name.tag.cfml storage.type.function.cfml
            3: punctuation.definition.tag.end.cfml
          pop: true
        - include: comments
        - match: (?i)(?=</?cf)
          push: cfmltags
  cfif:
    - match: (?i)(<)(cfif|cfelseif)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      set:
        - meta_scope: meta.tag.cfml
        - meta_content_scope: source.cfml.script
        - match: ">"
          scope: punctuation.definition.tag.end.cfml
          pop: true
        - include: scope:source.cfml.script
  cfml:
    - include: comments
    - match: (?i)(?=<cfcomponent)
      push: cfcomponent
    - match: (?i)(?=<cfinterface)
      push: cfinterface
    - include: cffunction
    - include: cfmltags
  cfmltags:
    - include: comments
    - include: cfoutput
    - include: cfquery
    - include: cfif
    - include: tags-with-script
    - include: cfscript
    - match: (?i)(<)(cf[a-z]+)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      set:
        - meta_scope: meta.tag.cfml
        - match: (/?>)
          scope: meta.tag.cfml punctuation.definition.tag.end.cfml
          pop: true
        - include: tag-generic-attribute
    - match: (?i)(</)(cf[a-z]+)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
        3: punctuation.definition.tag.end.cfml
      pop: true
  cfoutput:
    - match: (?i)(?<=('|"))(<)(cfoutput)(?=.*<\/cfoutput>\1)
      captures:
        2: punctuation.definition.tag.begin.cfml
        3: entity.name.tag.cfml
      set:
        - meta_scope: meta.tag.cfml
        - match: ">"
          scope: punctuation.definition.tag.end.cfml
          set: cfoutput-string-contents
        - include: tag-generic-attribute
    - match: (?i)(<)(cfoutput)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      set:
        - meta_scope: meta.tag.cfml
        - match: ">"
          scope: punctuation.definition.tag.end.cfml
          set: cfoutput-contents
        - include: tag-generic-attribute
  cfoutput-contents:
    - meta_content_scope: meta.scope.cfoutput.cfml
    - match: (?i)(</)(cfoutput)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml.end
        3: punctuation.definition.tag.end.cfml
      pop: true
    - match: ""
      push: html
      with_prototype:
        - include: comments
        - match: (?i)(?=</cfoutput>)
          pop: true
        - match: (?i)(?=</?cf)
          push: cfmltags
        - include: hash-delimiters
  cfoutput-string-contents:
    - meta_content_scope: meta.scope.cfoutput.cfml string.quoted
    - match: (?i)(</)(cfoutput)(>)(?=('|"))
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml.end
        3: punctuation.definition.tag.end.cfml
      pop: true
    - match: (?i)(?=</?cf)
      push: cfmltags
    - include: hash-delimiters
  cfquery:
    - match: (?i)(<)(cfquery)(?=\s|>)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      set:
        - meta_scope: meta.tag.cfml
        - match: ">"
          scope: punctuation.definition.tag.end.cfml
          set: cfquery-contents
        - include: tag-generic-attribute
  cfquery-contents:
    - meta_content_scope: meta.scope.cfquery.cfml
    - match: (?i)(</)(cfquery)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml.end
        3: punctuation.definition.tag.end.cfml
      pop: true
    - match: ""
      push: scope:source.sql
      with_prototype:
        - match: (?i)(?=</cfquery>)
          pop: true
        - match: (?i)(?=</?cf)
          push: cfmltags
        - include: hash-delimiters
  cfscript:
    - match: (?i)(<)(cfscript)(\s+|>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
        3: punctuation.definition.tag.end.cfml
      push:
        - meta_content_scope: source.cfml.script
        - match: (?i)(?=</cfscript>)
          pop: true
        - include: scope:source.cfml.script
    - match: (?i)(</)(cfscript)(>)
      captures:
        0: meta.tag.cfml
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
        3: punctuation.definition.tag.end.cfml
      pop: true
  comments:
    - match: <!---.*?--->
      scope: comment.line.cfml
    - match: <!---
      scope: punctuation.definition.comment.cfml
      push:
        - meta_scope: comment.block.cfml
        - match: "--->"
          pop: true
        - include: comments
  hash-delimiters:
    - match: "##"
      scope: constant.character.escape.hash.cfml
    - match: "#"
      scope: constant.character.hash.cfml.start
      push:
        - meta_content_scope: source.cfml.script
        - match: "#"
          scope: constant.character.hash.cfml
          pop: true
        - include: scope:source.cfml.script#expression
  string:
    - match: "'"
      scope: punctuation.definition.string.begin.cfml
      push: string-content-single
    - match: '"'
      scope: punctuation.definition.string.begin.cfml
      push: string-content-double
  string-content-single:
    - meta_scope: string.quoted.single.cfml
    - match: ('')
      scope: constant.character.escape.quote.cfml
    - match: (')
      captures:
        1: punctuation.definition.string.end.cfml
      pop: true
    - include: hash-delimiters
  string-content-double:
    - meta_scope: string.quoted.double.cfml
    - match: ("")
      scope: constant.character.escape.quote.cfml
    - match: (")
      captures:
        1: punctuation.definition.string.end.cfml
      pop: true
    - include: hash-delimiters
  tag-generic-attribute:
    - include: comments
    - match: \b([a-zA-Z0-9:-]+)\b
      captures:
        1: entity.other.attribute-name.cfml
    - match: =
      scope: punctuation.separator.key-value.cfml
      push:
        - match: (?=[;/>{])
          pop: true
        - match: (?<=[^\s=])
          pop: true
        - include: string
        - match: '(?:[^\s<>/''"{;]|/(?!/>))+'
          scope: string.unquoted.cfml
  tags-with-script:
    - match: (?i)(<)(cfset|cfreturn)(?=\s|/?>)
      captures:
        1: punctuation.definition.tag.begin.cfml
        2: entity.name.tag.cfml
      set:
        - meta_scope: meta.tag.cfml
        - meta_content_scope: source.cfml.script
        - match: "(/?>)"
          scope: punctuation.definition.tag.end.cfml
          pop: true
        - include: scope:source.cfml.script