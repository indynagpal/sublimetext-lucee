{
	"array": {
		"append": "(${1:any value}${2:, ${3:boolean merge}})",
		"avg": "()",
		"clear": "()",
		"contains": "(${1:object needle}${2:, ${3:boolean substringMatch}})",
		"containsNoCase": "(${1:object needle})",
		"delete": "(${1:object value}${2:, ${3:string scope}})",
		"deleteAt": "(${1:number position})",
		"each": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"every": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"filter": "(${1:function filter}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"find": "(${1:any value_or_closure})",
		"findAll": "(${1:any value_or_closure})",
		"findAllNoCase": "(${1:any value})",
		"findNoCase": "(${1:any value})",
		"first": "()",
		"indexExists": "(${1:number index})",
		"insertAt": "(${1:number position}${2:any value})",
		"isEmpty": "()",
		"last": "()",
		"len": "()",
		"map": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"max": "()",
		"median": "()",
		"merge": "(${1:array array2}${2:, ${3:boolean leaveIndex}})",
		"mid": "(${1:number start}${2:, ${3:number count}})",
		"min": "()",
		"prepend": "(${1:any value})",
		"reduce": "(${1:function closure}${2:, ${3:object initalValue}})",
		"resize": "(${1:number minimum_size})",
		"reverse": "()",
		"set": "(${1:number start_pos}${2:number end_pos}${3:any value})",
		"slice": "(${1:number offset}${2:, ${3:number length}})",
		"some": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"sort": "(${1:object sorttype_or_closure}${2:, ${3:string sort_order}}${4:, ${5:boolean locale_sensitive}})",
		"sum": "()",
		"swap": "(${1:number position1}${2:number position2})",
		"toList": "(${1:string delimiter})",
		"toStruct": "()"
	},
	"date": {
		"add": "(${1:string datepart}, ${2:number})",
		"day": "(${1:string timezone})",
		"dayOfWeek": "(${1:string timezone})",
		"dayOfYear": "(${1:string timezone})",
		"daysInMonth": "(${1:string timezone})",
		"daysInYear": "(${1:string timezone})",
		"diff": "(${1:string datepart}, ${2:datetime date2})",
		"firstDayOfMonth": "(${1:string timezone})",
		"hour": "(${1:string timezone})",
		"lsDayOfWeek": "(${1:string locale}${2:, ${3:string timezone}})",
		"minute": "(${1:string timezone})",
		"month": "(${1:string timezone})",
		"part": "(${1:string datepart}${2:, ${3:string timezone}})",
		"quarter": "(${1:string timezone})",
		"second": "(${1:string timezone})",
		"week": "(${1:string timezone})",
		"year": "(${1:string timezone})"
	},
	"image": {
		"blur": "(${1:number blurRadius})",
		"clearRect": "(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height})",
		"copy": "(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height}${5:, ${6:number dx}}${7:, ${8:number dy}})",
		"crop": "(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height})",
		"drawArc": "(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height}, ${5:number startAngle}, ${6:number arcAngle}${7:, ${8:boolean filled}})",
		"drawCubicCurve": "(${1:number x1}, ${2:number y1}, ${3:number ctrlx1}, ${4:number ctrly1}, ${5:number ctrlx2}, ${6:number ctrly2}, ${7:number x2}, ${8:number y2})",
		"drawLine": "(${1:number x1}, ${2:number y1}, ${3:number x2}, ${4:number y2})",
		"drawLines": "(${1:array xcoords}, ${2:array ycoords}${3:, ${4:boolean isPolygon}}${5:, ${6:boolean filled}})",
		"drawOval": "(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height}${5:, ${6:boolean filled}})",
		"drawPoint": "(${1:number x}, ${2:number y})",
		"drawQuadraticCurve": "(${1:number x1}, ${2:number y1}, ${3:number ctrlx}, ${4:number ctrly}, ${5:number x2}, ${6:number y2})",
		"drawRect": "(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height}${5:, ${6:boolean filled}})",
		"drawRoundRect": "(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height}, ${5:number arcWidth}, ${6:number arcHeight}${7:, ${8:boolean filled}})",
		"flip": "(${1:string transpose})",
		"getBufferedImage": "()",
		"getHeight": "()",
		"getWidth": "()",
		"grayScale": "()",
		"info": "()",
		"overlay": "(${1:any source2})",
		"paste": "(${1:any image2}${2:, ${3:number x}}${4:, ${5:number y}})",
		"resize": "(${1:string width}${2:, ${3:string height}}${4:, ${5:string interpolation}}${6:, ${7:number blurFactor}})",
		"scaleToFit": "(${1:string fitWidth}, ${2:string fitHeight}${3:, ${4:string interpolation}}${5:, ${6:number blurFactor}})",
		"setAntiAliasing": "(${1:string antialias})",
		"setDrawingStroke": "(${1:struct attributeCollection})",
		"sharpen": "(${1:number gain})",
		"translate": "(${1:number xTrans}, ${2:number yTrans}${3:, ${4:string interpolation}})",
		"writeBase64": "(${1:string destination}, ${2:string format}${3:, ${4:boolean inHTMLFormat}})"
	},
	"query": {
		"addColumn": "(${1:string column}${2:, ${3:any datatype_or_array}}${4:, ${5:any array}})",
		"addRow": "(${1:any numberOrData})",
		"columnArray": "()",
		"columnCount": "()",
		"columnData": "(${1:string columnName}${2:, ${3:function closure}})",
		"columnExists": "(${1:string column})",
		"columnList": "(${1:string delimiter})",
		"currentRow": "()",
		"deleteColumn": "(${1:String column})",
		"deleteRow": "(${1:number row})",
		"each": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"every": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"filter": "(${1:function filter}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"getCell": "(${1:string column_name}${2:, ${3:number row_number}})",
		"map": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"recordCount": "()",
		"reduce": "(${1:function closure}${2:, ${3:object initalValue}})",
		"rowData": "(${1:number rowNumber})",
		"setCell": "(${1:string column_name}${2:any value}${3:, ${4:number row_number}})",
		"slice": "(${1:number offset}${2:, ${3:number length}})",
		"some": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"sort": "(${1:string column_name}${2:, ${3:string direction}})"
	},
	"string": {
		"cJustify": "(${1:number length})",
		"compare": "(${1:string string2})",
		"compareNoCase": "(${1:string string2})",
		"find": "(${1:string substring}${2:, ${3:number start}})",
		"findNoCase": "(${1:string substring}${2:, ${3:number start}})",
		"findOneOf": "(${1:string set}${2:, ${3:number start}})",
		"getToken": "(${1:number index}${2:, ${3:string delimiters}})",
		"insert": "(${1:string substring}, ${2:number position})",
		"lCase": "()",
		"lJustify": "(${1:number length})",
		"lTrim": "()",
		"left": "(${1:number count})",
		"len": "()",
		"listAppend": "(${1:string value}${2:, ${3:string delimiters}})",
		"listAvg": "(${1:string delimiters}${2:, ${3:boolean multiCharacterDelimiter}})",
		"listChangeDelims": "(${1:string new_delimiter}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}})",
		"listCompact": "(${1:string delimiters}${2:, ${3:boolean multiCharacterDelimiter}})",
		"listContains": "(${1:string substring}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}})",
		"listContainsNoCase": "(${1:string substring}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}})",
		"listDeleteAt": "(${1:number position}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})",
		"listEach": "(${1:function closure}${2:, ${3:string delimiter}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}}${8:, ${9:boolean parallel}}${10:, ${11:number maxThreads}})",
		"listEvery": "(${1:function closure}${2:, ${3:string delimiter}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}}${8:, ${9:boolean parallel}}${10:, ${11:number maxThreads}})",
		"listFilter": "(${1:function filter}${2:, ${3:string delimiter}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}}${8:, ${9:boolean parallel}}${10:, ${11:number maxThreads}})",
		"listFind": "(${1:string value}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})",
		"listFindNoCase": "(${1:string value}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})",
		"listFirst": "(${1:string delimiters}${2:, ${3:boolean includeEmptyFields}}${4:, ${5:number count}})",
		"listGetAt": "(${1:number position}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})",
		"listIndexExists": "(${1:number index}${2:, ${3:string delimiter}}${4:, ${5:boolean includeEmptyFields}})",
		"listInsertAt": "(${1:number position}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}})",
		"listItemTrim": "(${1:string delimiters}${2:, ${3:boolean includeEmptyFields}})",
		"listLast": "(${1:string delimiters}${2:, ${3:boolean includeEmptyFields}})",
		"listLen": "(${1:string delimiters}${2:, ${3:boolean includeEmptyFields}})",
		"listMap": "(${1:function closure}${2:, ${3:string delimiter}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}}${8:, ${9:boolean parallel}}${10:, ${11:number maxThreads}})",
		"listPrepend": "(${1:string value}${2:, ${3:string delimiters}})",
		"listQualify": "(${1:string qualifier}${2:, ${3:string delimiters}}${4:, ${5:string elements}}${6:, ${7:boolean includeEmptyFields}})",
		"listReduce": "(${1:function closure}${2:, ${3:object initalValue}}${4:, ${5:string delimiter}}${6:, ${7:boolean includeEmptyFields}}${8:, ${9:boolean multiCharacterDelimiter}})",
		"listRemoveDuplicates": "(${1:string delimiters}${2:, ${3:boolean ignoreCase}})",
		"listRest": "(${1:string delimiters}${2:, ${3:boolean includeEmptyFields}}${4:, ${5:number offset}})",
		"listSetAt": "(${1:number position}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}})",
		"listSome": "(${1:function closure}${2:, ${3:string delimiter}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}}${8:, ${9:boolean parallel}}${10:, ${11:number maxThreads}})",
		"listSort": "(${1:string sort_type}${2:, ${3:string sort_order}}${4:, ${5:string delimiters}}${6:, ${7:boolean includeEmptyFields}})",
		"listToArray": "(${1:string delimiter}}${2:, ${3:boolean includeEmptyFields}}${4:, ${5:boolean multiCharacterDelimiter}})",
		"listValueCount": "(${1:string value}${2:, ${3:string delimiter}}${4:, ${5:boolean includeEmptyFields}})",
		"listValueCountNoCase": "(${1:string value}${2:, ${3:string delimiter}}${4:, ${5:boolean includeEmptyFields}})",		"mid": "(${1:number start}${2:, ${3:number count}})",
		"rTrim": "()",
		"reFind": "(${1:string reg_expression}${2:, ${3:number start}}${4:, ${5:boolean returnsubexpressions}})",
		"reFindNoCase": "(${1:string reg_expression}${2:, ${3:number start}}${4:, ${5:boolean returnsubexpressions}})",
		"reMatch": "(${1:string regex})",
		"reMatchNoCase": "(${1:string reg_expression})",
		"reReplace": "(${1:string reg_expression}, ${2:string substring}${3:, ${4:string scope}})",
		"reReplaceNoCase": "(${1:string reg_expression}, ${2:string substring}${3:, ${4:string scope}})",
		"removeChars": "(${1:number start}, ${2:number count})",
		"repeatString": "(${1:number count})",
		"replace": "(${1:any substring1}${2:, ${3:string substring2}}${4:, ${5:string scope}})",
		"replaceNoCase": "(${1:any substring1}${2:, ${3:string substring2}}${4:, ${5:string scope}})",
		"reverse": "()",
		"right": "(${1:number count})",
		"spanExcluding": "(${1:string set})",
		"spanIncluding": "(${1:string set})",
		"stripCr": "()",
		"trim": "()",
		"uCase": "()",
		"wrap": "(${1:number limit}${2:, ${3:boolean strip}})"
	},
	"struct": {
		"append": "(${1:struct Struct2}${2:, ${3:boolean OverwriteFlag}})",
		"clear": "()",
		"copy": "()",
		"count": "()",
		"delete": "(${1:string key}${2:, ${3:boolean indicatenotexisting}})",
		"each": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"every": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"filter": "(${1:function filter}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"find": "(${1:string key}${2:, ${3:any defaultValue}})",
		"findKey": "(${1:string Key}${2:, ${3:string Scope}})",
		"findValue": "(${1:string Key}${2:, ${3:string Scope}})",
		"get": "(${1:string path})",
		"insert": "(${1:string key}${2:any value}${3:, ${4:boolean allowoverwrite}})",
		"isEmpty": "()",
		"keyArray": "()",
		"keyExists": "(${1:string key})",
		"keyList": "(${1:string delimiter})",
		"keyTranslate": "(${1:boolean deepTranslation}${2:, ${3:boolean leaveOriginalKey}})",
		"map": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"reduce": "(${1:function closure}${2:, ${3:object initalValue}})",
		"some": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"sort": "(${1:string sortType}${2:, ${3:string sortOrder}}${4:, ${5:string pathToSubElement}})",
		"update": "(${1:string key}${2:any value})"
	}
}