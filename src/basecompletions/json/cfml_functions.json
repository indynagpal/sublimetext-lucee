{
	"abs": "(${1:number})",
	"acos": "(${1:number})",
	"addSoapRequestHeader": "(${1:object webservice}, ${2:string namespace}, ${3:string name}, ${4:object value}${5:, ${6:boolean mustUnderstand}})",
	"addSoapResponseHeader": "(${1:string namespace}, ${2:string name}, ${3:object value}${4:, ${5:boolean mustUnderstand}})",
	"ajaxLink": "(${1:string url})",
	"ajaxOnLoad": "(${1:any functionname})",
	"applicationStartTime": "()",
	"applicationStop": "()",
	"array": "()",
	"arrayAppend": "(${1:array}, ${2:any value}${3:, ${4:boolean merge}})",
	"arrayAvg": "(${1:array})",
	"arrayClear": "(${1:array})",
	"arrayContains": "(${1:array haystack}, ${2:object needle}${3:, ${4:boolean substringMatch}})",
	"arrayContainsNoCase": "(${1:array haystack}, ${2:object needle})",
	"arrayDelete": "(${1:array}, ${2:object value}${3:, ${4:string scope}})",
	"arrayDeleteAt": "(${1:array}, ${2:number position})",
	"arrayEach": "(${1:array}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"arrayEvery": "(${1:array}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"arrayFilter": "(${1:array}, ${2:function filter}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"arrayFind": "(${1:array}, ${2:any value_or_closure})",
	"arrayFindAll": "(${1:array}, ${2:any value_or_closure})",
	"arrayFindAllNoCase": "(${1:array}, ${2:any value})",
	"arrayFindNoCase": "(${1:array}, ${2:any value})",
	"arrayFirst": "(${1:array})",
	"arrayIndexExists": "(${1:array}, ${2:number index})",
	"arrayInsertAt": "(${1:array}, ${2:number position}, ${3:any value})",
	"arrayIsDefined": "(${1:array}, ${2:number index})",
	"arrayIsEmpty": "(${1:array})",
	"arrayLast": "(${1:array})",
	"arrayLen": "(${1:array})",
	"arrayMap": "(${1:array}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"arrayMax": "(${1:array})",
	"arrayMedian": "(${1:array})",
	"arrayMerge": "(${1:array array1}, ${2:array array2}${3:, ${4:boolean leaveIndex}})",
	"arrayMid": "(${1:array}, ${2:number start}${3:, ${4:number count}})",
	"arrayMin": "(${1:array})",
	"arrayNew": "(${1:number dimension})",
	"arrayPrepend": "(${1:array}, ${2:any value})",
	"arrayReduce": "(${1:array}, ${2:function closure}${3:, ${4:object initalValue}})",
	"arrayResize": "(${1:array}, ${2:number minimum_size})",
	"arrayReverse": "(${1:array})",
	"arraySet": "(${1:array}, ${2:number start_pos}, ${3:number end_pos}, ${4:any value})",
	"arraySlice": "(${1:array}, ${2:number offset}${3:, ${4:number length}})",
	"arraySome": "(${1:array}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"arraySort": "(${1:object array}, ${2:object sorttype_or_closure}${3:, ${4:string sort_order}}${5:, ${6:boolean locale_sensitive}})",
	"arraySum": "(${1:array})",
	"arraySwap": "(${1:array}, ${2:number position1}, ${3:number position2})",
	"arrayToList": "(${1:array}${2:, ${3:string delimiter}})",
	"arrayToStruct": "(${1:array})",
	"asc": "(${1:string}${2:, ${3:number position}})",
	"asin": "(${1:number})",
	"atn": "(${1:number})",
	"beat": "(${1:any time})",
	"binaryDecode": "(${1:string encoded_binary}, ${2:string binaryencoding})",
	"binaryEncode": "(${1:binary}, ${2:string encoding})",
	"bitAnd": "(${1:number number1}, ${2:number number2})",
	"bitMaskClear": "(${1:number}, ${2:number start}, ${3:number length})",
	"bitMaskRead": "(${1:number}, ${2:number start}, ${3:number length})",
	"bitMaskSet": "(${1:number}, ${2:number mask}, ${3:number start}, ${4:number length})",
	"bitNot": "(${1:number})",
	"bitOr": "(${1:number number1}, ${2:number number2})",
	"bitShln": "(${1:number}, ${2:number count})",
	"bitShrn": "(${1:number}, ${2:number count})",
	"bitXor": "(${1:number number1}, ${2:number number2})",
	"cJustify": "(${1:string}, ${2:number length})",
	"cacheClear": "(${1:string filter}${2:, ${3:string cacheName}})",
	"cacheCount": "(${1:string cacheName})",
	"cacheDelete": "(${1:string id}${2:, ${3:boolean throwOnError}}${4:, ${5:string cacheName}})",
	"cacheGet": "(${1:string id}${2:, ${3:object throwWhenNotExist}}${4:, ${5:string cacheName}})",
	"cacheGetAll": "(${1:string filter}${2:, ${3:string cacheName}})",
	"cacheGetAllIDs": "(${1:string filter}${2:, ${3:string cacheName}})",
	"cacheGetDefaultCacheName": "(${1:string type})",
	"cacheGetMetadata": "(${1:string id}${2:, ${3:string cacheName}})",
	"cacheGetProperties": "(${1:string type})",
	"cacheIDExists": "(${1:string id}${2:, ${3:string cacheName}})",
	"cacheKeyExists": "(${1:string key}${2:, ${3:string cacheName}})",
	"cachePut": "(${1:string id}, ${2:object value}${3:, ${4:timeSpan}}${5:, ${6:timespan idleTime}}${7:, ${8:string cacheName}})",
	"cacheRemove": "(${1:object ids}${2:, ${3:boolean throwOnError}}${4:, ${5:string cacheName}})",
	"cacheRemoveAll": "(${1:string cacheName})",
	"cacheSetProperties": "(${1:struct propsSruct})",
	"callStackDump": "(${1:string output})",
	"callStackGet": "(${1:string type})",
	"canonicalize": "(${1:string input}, ${2:boolean restrictMultiple}, ${3:boolean restrictMixed})",
	"ceiling": "(${1:number})",
	"cfusion_Decrypt": "(${1:string}, ${2:string key})",
	"cfusion_Encrypt": "(${1:string}, ${2:string key})",
	"charsetDecode": "(${1:string encoded_binary}, ${2:string encoding})",
	"charsetEncode": "(${1:binary}, ${2:string encoding})",
	"chr": "(${1:number})",
	"collectionEach": "(${1:object collection}, ${2:function closure})",
	"collectionEvery": "(${1:object collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"collectionFilter": "(${1:object collection}, ${2:function filter}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"collectionMap": "(${1:object collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"collectionReduce": "(${1:object collection}, ${2:function closure}${3:, ${4:object initalValue}})",
	"collectionSome": "(${1:object collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"compare": "(${1:string string1}, ${2:string string2})",
	"compareNoCase": "(${1:string string1}, ${2:string string2})",
	"componentCacheClear": "()",
	"componentCacheList": "()",
	"componentInfo": "(${1:component})",
	"compress": "(${1:string format}, ${2:string source}, ${3:string target}${4:, ${5:boolean includeBaseFolder}}${6:, ${7:string mode}})",
	"contractPath": "(${1:string path}${2:, ${3:boolean placeholder}})",
	"cos": "(${1:number})",
	"createDate": "(${1:number year}, ${2:number month}, ${3:number day}${4:, ${5:string timezone}})",
	"createDateTime": "(${1:number year}, ${2:number month}, ${3:number day}, ${4:number hour}, ${5:number minute}, ${6:number second}${7:, ${8:number millis}}${9:, ${10:string timezone}})",
	"createDynamicProxy": "(${1:object cfc}, ${2:object interfaces})",
	"createGuid": "()",
	"createObject": "(${1:string type}${2:, ${3:string classname}}${4:, ${5:object context}}${6:, ${7:object arg4}})",
	"createOdbcDate": "(${1:datetime date})",
	"createOdbcDateTime": "(${1:datetime date})",
	"createOdbcTime": "(${1:datetime date})",
	"createTime": "(${1:number hour}, ${2:number minute}, ${3:number second}${4:, ${5:number millis}}${6:, ${7:string timezone}})",
	"createTimeSpan": "(${1:number days}, ${2:number hours}, ${3:number minutes}, ${4:number seconds}${5:, ${6:number milliseconds}})",
	"createUniqueID": "()",
	"createUuid": "()",
	"csrfGenerateToken": "(${1:string key}${2:, ${3:boolean forceNew}})",
	"csrfVerifyToken": "(${1:string token}${2:, ${3:string key}})",
	"ctCacheClear": "()",
	"ctCacheList": "()",
	"datasourceFlushMetacache": "(${1:string datasourceName})",
	"dateAdd": "(${1:string datepart}, ${2:number}, ${3:datetime date})",
	"dateCompare": "(${1:datetime date1}, ${2:datetime date2}${3:, ${4:string datepart}})",
	"dateConvert": "(${1:string conversion_type}, ${2:datetime date})",
	"dateDiff": "(${1:string datepart}, ${2:datetime date1}, ${3:datetime date2})",
	"dateFormat": "(${1:any date}${2:, ${3:string mask}}${4:, ${5:string timezone}})",
	"datePart": "(${1:string datepart}, ${2:datetime date}${3:, ${4:string timezone}})",
	"dateTimeFormat": "(${1:any datetime}${2:, ${3:string mask}}${4:, ${5:string timezone}})",
	"day": "(${1:datetime date}${2:, ${3:string timezone}})",
	"dayOfWeek": "(${1:datetime date}${2:, ${3:string timezone}})",
	"dayOfWeekAsString": "(${1:number day_of_week}${2:, ${3:string locale}})",
	"dayOfWeekShortAsString": "(${1:number day_of_week}${2:, ${3:string locale}})",
	"dayOfYear": "(${1:datetime date}${2:, ${3:string timezone}})",
	"daysInMonth": "(${1:datetime date}${2:, ${3:string timezone}})",
	"daysInYear": "(${1:datetime date}${2:, ${3:string timezone}})",
	"de": "(${1:string})",
	"decimalFormat": "(${1:any number})",
	"decodeFromUrl": "(${1:string})",
	"decrementValue": "(${1:number})",
	"decrypt": "(${1:string encrypted_string}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}}${7:, ${8:any IVorSalt}}${9:, ${10:number iterations}})",
	"decryptBinary": "(${1:any input}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:any IVorSalt}}${7:, ${8:number iterations}})",
	"deleteClientVariable": "(${1:string name})",
	"deserializeJSON": "(${1:string JSONVar}${2:, ${3:boolean strictMapping}})",
	"directoryCopy": "(${1:string source}, ${2:string destination}${3:, ${4:boolean recurse}}${5:, ${6:any filter}}${7:, ${8:boolean createPath}})",
	"directoryCreate": "(${1:string path}${2:, ${3:boolean createPath}}${4:, ${5:boolean ignoreExists}})",
	"directoryDelete": "(${1:string path}${2:, ${3:boolean recurse}})",
	"directoryExists": "(${1:string path}${2:, ${3:object allowRealPath}})",
	"directoryList": "(${1:string path}${2:, ${3:boolean recurse}}${4:, ${5:string listInfo}}${6:, ${7:any filter}}${8:, ${9:string sort}})",
	"directoryRename": "(${1:string oldPath}, ${2:string newPath}${3:, ${4:boolean createPath}})",
	"dollarFormat": "(${1:string number})",
	"dump": "(${1:object var}${2:, ${3:boolean expand}}${4:, ${5:string format}}${6:, ${7:string hide}}${8:, ${9:numeric keys}}${10:, ${11:string label}}${12:, ${13:boolean metainfo}}${14:, ${15:string output}}${16:, ${17:string show}}${18:, ${19:boolean showUDFs}}${20:, ${21:numeric top}}${22:, ${23:boolean abort}}${24:, ${25:string eval}})",
	"duplicate": "(${1:any object}${2:, ${3:boolean deepcopy}})",
	"each": "(${1:object collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"echo": "(${1:string})",
	"empty": "(${1:variablestring variable})",
	"encodeForCSS": "(${1:string})",
	"encodeForDn": "(${1:string})",
	"encodeForHTML": "(${1:string})",
	"encodeForHTMLAttribute": "(${1:string})",
	"encodeForJavaScript": "(${1:string})",
	"encodeForLDAP": "(${1:string})",
	"encodeForUrl": "(${1:string})",
	"encodeForXML": "(${1:string})",
	"encodeForXMLAttribute": "(${1:string})",
	"encodeForXpath": "(${1:string})",
	"encrypt": "(${1:string}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}}${7:, ${8:any IVorSalt}}${9:, ${10:number iterations}})",
	"encryptBinary": "(${1:any bytes}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:any IVorSalt}}${7:, ${8:number iterations}})",
	"entityDelete": "(${1:object name})",
	"entityLoad": "(${1:string name}${2:, ${3:any idOrFilter}}${4:, ${5:any uniqueOrOrder}}${6:, ${7:any options}})",
	"entityLoadByExample": "(${1:object sampleEntity}${2:, ${3:boolean unique}})",
	"entityLoadByPK": "(${1:string name}, ${2:string id}${3:, ${4:boolean unique}})",
	"entityMerge": "(${1:any entity})",
	"entityNameArray": "()",
	"entityNameList": "(${1:string delimiter})",
	"entityNew": "(${1:string entityName}${2:, ${3:struct properties}})",
	"entityReload": "(${1:object entity})",
	"entitySave": "(${1:object entity}${2:, ${3:boolean forceInsert}})",
	"entityToQuery": "(${1:object entity}${2:, ${3:string name}})",
	"esapiDecode": "(${1:string decodeFrom}, ${2:string})",
	"esapiEncode": "(${1:string encodeFor}, ${2:string})",
	"evaluate": "()",
	"exp": "(${1:number})",
	"expandPath": "(${1:string relative_path})",
	"extract": "(${1:string format}, ${2:string source}, ${3:string target})",
	"fileAppend": "(${1:string file}, ${2:any data}${3:, ${4:string charset}})",
	"fileClose": "(${1:any fileObj})",
	"fileCopy": "(${1:any source}, ${2:any destination})",
	"fileDelete": "(${1:any source})",
	"fileExists": "(${1:any source}${2:, ${3:object allowRealPath}})",
	"fileGetMimeType": "(${1:any file}${2:, ${3:boolean checkNotExtension}})",
	"fileIsEOF": "(${1:any source})",
	"fileMove": "(${1:any source}, ${2:any destination})",
	"fileOpen": "(${1:string path}${2:, ${3:string mode}}${4:, ${5:string charset}}${6:, ${7:boolean seekable}})",
	"fileRead": "(${1:any file}${2:, ${3:any charsetOrBufferSize}})",
	"fileReadBinary": "(${1:any source})",
	"fileReadLine": "(${1:any fileObj})",
	"fileSeek": "(${1:any fileObj}, ${2:number pos})",
	"fileSetAccessMode": "(${1:any source}, ${2:string mode})",
	"fileSetAttribute": "(${1:any source}, ${2:string attribute})",
	"fileSetLastModified": "(${1:any source}, ${2:date})",
	"fileSkipBytes": "(${1:any fileObj}, ${2:number len})",
	"fileUpload": "(${1:string destination}${2:, ${3:string fileField}}${4:, ${5:string accept}}${6:, ${7:string nameConflict}}${8:, ${9:string mode}}${10:, ${11:string attributes}}${12:, ${13:object acl}})",
	"fileUploadAll": "(${1:string destination}${2:, ${3:string accept}}${4:, ${5:string nameConflict}}${6:, ${7:string mode}}${8:, ${9:string attributes}}${10:, ${11:object acl}})",
	"fileWrite": "(${1:any file}, ${2:any data}${3:, ${4:string charset}})",
	"fileWriteLine": "(${1:any file}, ${2:string data})",
	"find": "(${1:string substring}, ${2:string}${3:, ${4:number start}})",
	"findNoCase": "(${1:string substring}, ${2:string}${3:, ${4:number start}})",
	"findOneOf": "(${1:string set}, ${2:string}${3:, ${4:number start}})",
	"firstDayOfMonth": "(${1:datetime date}${2:, ${3:string timezone}})",
	"fix": "(${1:number})",
	"formatBaseN": "(${1:number}, ${2:number radix})",
	"generateSecretKey": "(${1:string algorithm}${2:, ${3:number keySize}})",
	"getApplicationMetadata": "()",
	"getApplicationSettings": "(${1:boolean suppressFunction})",
	"getAuthUser": "()",
	"getBaseTagData": "(${1:string tagname}${2:, ${3:number instancenumber}})",
	"getBaseTagList": "(${1:string delimiter})",
	"getBaseTemplatePath": "()",
	"getBuiltinFunction": "(${1:string name})",
	"getCanonicalPath": "(${1:string path})",
	"getClassPath": "()",
	"getClientVariablesList": "()",
	"getComponentMetadata": "(${1:object pathOrCFC})",
	"getContextRoot": "()",
	"getCpuUsage": "(${1:number time})",
	"getCurrentContext": "()",
	"getCurrentTemplatePath": "()",
	"getDirectoryFromPath": "(${1:string path})",
	"getEncoding": "(${1:string scope})",
	"getFileFromPath": "(${1:string path})",
	"getFileInfo": "(${1:any file})",
	"getFreeSpace": "(${1:object filepath})",
	"getFunctionCalledName": "()",
	"getFunctionData": "(${1:string functionName})",
	"getFunctionKeywords": "()",
	"getFunctionList": "()",
	"getHTTPRequestData": "()",
	"getHTTPTimeString": "(${1:datetime date_time_object})",
	"getK2ServerDocCount": "()",
	"getK2ServerDocCountLimit": "()",
	"getLocalHostIp": "(${1:boolean all}${2:, ${3:boolean refresh}})",
	"getLocale": "()",
	"getLocaleDisplayName": "(${1:string locale}${2:, ${3:string dspLocale}})",
	"getLuceeID": "()",
	"getMemoryUsage": "(${1:string type})",
	"getMetadata": "(${1:any object}${2:, ${3:boolean source}})",
	"getMetricData": "(${1:string monitor_name})",
	"getNumericDate": "(${1:any arg1})",
	"getPageContext": "()",
	"getPrinterList": "(${1:string delimiters})",
	"getProfileSections": "(${1:string iniFile})",
	"getProfileString": "(${1:string iniPath}, ${2:string section}, ${3:string entry})",
	"getReadableImageFormats": "()",
	"getSoapRequest": "(${1:any webservice})",
	"getSoapRequestHeader": "(${1:string namespace}, ${2:string name}${3:, ${4:boolean asXML}})",
	"getSoapResponse": "(${1:any webservice})",
	"getSoapResponseHeader": "(${1:any webservice}, ${2:string namespace}, ${3:string name}${4:, ${5:boolean asXML}})",
	"getSystemFreeMemory": "()",
	"getSystemTotalMemory": "()",
	"getTagData": "(${1:string nameSpaceWithSeperator}, ${2:string tagName})",
	"getTagList": "()",
	"getTempDirectory": "()",
	"getTempFile": "(${1:string dir}, ${2:string prefix})",
	"getTemplatePath": "()",
	"getTickCount": "(${1:string unit})",
	"getTimezone": "()",
	"getTimezoneInfo": "()",
	"getToken": "(${1:string}, ${2:number index}${3:, ${4:string delimiters}})",
	"getTotalSpace": "(${1:object filepath})",
	"getUserRoles": "()",
	"getVariable": "(${1:string name})",
	"getVfsMetadata": "(${1:string scheme})",
	"getWriteableImageFormats": "()",
	"hash": "(${1:any input}${2:, ${3:string algorithm}}${4:, ${5:string encoding}}${6:, ${7:number numIterations}})",
	"hash40": "(${1:any input}${2:, ${3:string algorithm}}${4:, ${5:string encoding}}${6:, ${7:number numIterations}})",
	"hmac": "(${1:object message}, ${2:object key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}})",
	"hour": "(${1:datetime Date}${2:, ${3:string timezone}})",
	"htmlCodeFormat": "(${1:string}${2:, ${3:number version}})",
	"htmlEditFormat": "(${1:string}${2:, ${3:number version}})",
	"htmlParse": "(${1:string html}${2:, ${3:boolean caseSensitive}})",
	"iif": "(${1:boolean condition}, ${2:string string_expression1}, ${3:string string_expression2})",
	"imageAddBorder": "(${1:any name}${2:, ${3:number thickness}}${4:, ${5:string color}}${6:, ${7:string borderType}})",
	"imageBlur": "(${1:image}${2:, ${3:number blurRadius}})",
	"imageClearRect": "(${1:image}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height})",
	"imageCopy": "(${1:any name}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height}${6:, ${7:number dx}}${8:, ${9:number dy}})",
	"imageCrop": "(${1:any name}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height})",
	"imageDrawArc": "(${1:any name}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height}, ${6:number startAngle}, ${7:number arcAngle}${8:, ${9:boolean filled}})",
	"imageDrawBeveledRect": "(${1:any name}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height}${6:, ${7:boolean raised}}${8:, ${9:boolean filled}})",
	"imageDrawCubicCurve": "(${1:any name}, ${2:number x1}, ${3:number y1}, ${4:number ctrlx1}, ${5:number ctrly1}, ${6:number ctrlx2}, ${7:number ctrly2}, ${8:number x2}, ${9:number y2})",
	"imageDrawImage": "(${1:any name}, ${2:any image}, ${3:number x}, ${4:number y})",
	"imageDrawLine": "(${1:any name}, ${2:number x1}, ${3:number y1}, ${4:number x2}, ${5:number y2})",
	"imageDrawLines": "(${1:any name}, ${2:array xcoords}, ${3:array ycoords}${4:, ${5:boolean isPolygon}}${6:, ${7:boolean filled}})",
	"imageDrawOval": "(${1:any name}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height}${6:, ${7:boolean filled}})",
	"imageDrawPoint": "(${1:any name}, ${2:number x}, ${3:number y})",
	"imageDrawQuadraticCurve": "(${1:any name}, ${2:number x1}, ${3:number y1}, ${4:number ctrlx}, ${5:number ctrly}, ${6:number x2}, ${7:number y2})",
	"imageDrawRect": "(${1:any name}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height}${6:, ${7:boolean filled}})",
	"imageDrawRoundRect": "(${1:any name}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height}, ${6:number arcWidth}, ${7:number arcHeight}${8:, ${9:boolean filled}})",
	"imageDrawText": "(${1:any name}, ${2:string str}, ${3:number x}, ${4:number y}${5:, ${6:struct attributeCollection}})",
	"imageFilter": "(${1:any name}, ${2:string filtername}${3:, ${4:struct parameters}})",
	"imageFilterColorMap": "(${1:string type}${2:, ${3:string lineColor1}}${4:, ${5:string lineColor2}})",
	"imageFilterCurves": "()",
	"imageFilterKernel": "(${1:number width}, ${2:number height}, ${3:any data})",
	"imageFilterWarpGrid": "(${1:number rows}, ${2:number cols}, ${3:number width}, ${4:number height})",
	"imageFlip": "(${1:any name}${2:, ${3:string transpose}})",
	"imageFonts": "()",
	"imageFormats": "()",
	"imageGetBlob": "(${1:any source})",
	"imageGetBufferedImage": "(${1:any name})",
	"imageGetExifMetadata": "(${1:any name})",
	"imageGetExifTag": "(${1:any name}, ${2:string tagName})",
	"imageGetHeight": "(${1:image})",
	"imageGetIptcTag": "(${1:any name}, ${2:string tagName})",
	"imageGetWidth": "(${1:image})",
	"imageGrayScale": "(${1:any name})",
	"imageInfo": "(${1:any name})",
	"imageNegative": "(${1:any name})",
	"imageNew": "(${1:any source}${2:, ${3:string width}}${4:, ${5:string height}}${6:, ${7:string imageType}}${8:, ${9:string canvasColor}})",
	"imageOverlay": "(${1:any source1}, ${2:any source2})",
	"imagePaste": "(${1:any image1}, ${2:any image2}${3:, ${4:number x}}${5:, ${6:number y}})",
	"imageRead": "(${1:any path})",
	"imageReadBase64": "(${1:string b64str})",
	"imageResize": "(${1:any name}, ${2:string width}${3:, ${4:string height}}${5:, ${6:string interpolation}}${7:, ${8:number blurFactor}})",
	"imageRotate": "(${1:any name}, ${2:string x}${3:, ${4:string y}}${5:, ${6:string angle}}${7:, ${8:string interpolation}})",
	"imageRotateDrawingAxis": "(${1:any name}${2:, ${3:number angle}}${4:, ${5:number x}}${6:, ${7:number y}})",
	"imageScaleToFit": "(${1:any name}, ${2:string fitWidth}, ${3:string fitHeight}${4:, ${5:string interpolation}}${6:, ${7:number blurFactor}})",
	"imageSetAntiAliasing": "(${1:any name}${2:, ${3:string antialias}})",
	"imageSetBackgroundColor": "(${1:any name}, ${2:string color})",
	"imageSetDrawingAlpha": "(${1:any name}, ${2:number alpha})",
	"imageSetDrawingColor": "(${1:any name}, ${2:string color})",
	"imageSetDrawingStroke": "(${1:any name}${2:, ${3:struct attributeCollection}})",
	"imageSetDrawingTransparency": "(${1:any name}${2:, ${3:number percent}})",
	"imageSharpen": "(${1:any name}${2:, ${3:number gain}})",
	"imageShear": "(${1:any name}, ${2:number shear}${3:, ${4:string direction}}${5:, ${6:string interpolation}})",
	"imageShearDrawingAxis": "(${1:any name}, ${2:number shx}, ${3:number shy})",
	"imageTranslate": "(${1:any name}, ${2:number xTrans}, ${3:number yTrans}${4:, ${5:string interpolation}})",
	"imageTranslateDrawingAxis": "(${1:any name}, ${2:number x}, ${3:number y})",
	"imageWrite": "(${1:any name}${2:, ${3:string destination}}${4:, ${5:number quality}}${6:, ${7:boolean overwrite}})",
	"imageWriteBase64": "(${1:any name}, ${2:string destination}, ${3:string format}${4:, ${5:boolean inHTMLFormat}})",
	"imageXorDrawingMode": "(${1:any name}, ${2:string color})",
	"inPutBaseN": "(${1:string}, ${2:number radix})",
	"incrementValue": "(${1:number})",
	"insert": "(${1:string substring}, ${2:string}, ${3:number position})",
	"int": "(${1:number})",
	"invoke": "(${1:any object}, ${2:string name}${3:, ${4:any arguments}})",
	"isArray": "(${1:any value}${2:, ${3:number dimension}})",
	"isBinary": "(${1:any value})",
	"isBoolean": "(${1:any value})",
	"isClosure": "(${1:any object})",
	"isCustomFunction": "(${1:any name})",
	"isDate": "(${1:any string})",
	"isDebugMode": "()",
	"isDefined": "(${1:string variable})",
	"isEmpty": "(${1:any value})",
	"isImage": "(${1:any name})",
	"isImageFile": "(${1:string path})",
	"isInstanceOf": "(${1:any obj}, ${2:string type})",
	"isIpInRange": "(${1:any ips}, ${2:string ip})",
	"isIpv6": "(${1:string hostname})",
	"isJSON": "(${1:any var})",
	"isLeapYear": "(${1:number year})",
	"isLocalHost": "(${1:String ip})",
	"isNotMap": "(${1:any obj})",
	"isNull": "(${1:any object})",
	"isNumeric": "(${1:any string})",
	"isNumericDate": "(${1:any number})",
	"isObject": "(${1:any value})",
	"isPdfObject": "(${1:any value})",
	"isQuery": "(${1:any value})",
	"isSimpleValue": "(${1:any value})",
	"isSoapRequest": "()",
	"isStruct": "(${1:any variable})",
	"isUserInAnyRole": "(${1:string role_list})",
	"isUserInRole": "(${1:any role_name})",
	"isUserLoggedIn": "()",
	"isValid": "(${1:string type}, ${2:any value}${3:, ${4:any min_or_pattern}}${5:, ${6:any max}})",
	"isVideoFile": "(${1:string value})",
	"isWddx": "(${1:any value})",
	"isXML": "(${1:any value})",
	"isXMLAttribute": "(${1:any value})",
	"isXMLDoc": "(${1:any value})",
	"isXMLElem": "(${1:any value})",
	"isXMLNode": "(${1:any value})",
	"isXMLRoot": "(${1:any value})",
	"isZipFile": "(${1:string path})",
	"javaCast": "(${1:string type}, ${2:any variable})",
	"jsStringFormat": "(${1:string})",
	"lCase": "(${1:string})",
	"lJustify": "(${1:string}, ${2:number length})",
	"lTrim": "(${1:string})",
	"left": "(${1:string}, ${2:number count})",
	"len": "(${1:object value})",
	"listAppend": "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})",
	"listAvg": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean multiCharacterDelimiter}})",
	"listChangeDelims": "(${1:string list}, ${2:string new_delimiter}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}})",
	"listCompact": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean multiCharacterDelimiter}})",
	"listContains": "(${1:string list}, ${2:string substring}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}})",
	"listContainsNoCase": "(${1:string list}, ${2:string substring}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}})",
	"listDeleteAt": "(${1:string list}, ${2:number position}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}})",
	"listEach": "(${1:string list}, ${2:function closure}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:number maxThreads}})",
	"listEvery": "(${1:string list}, ${2:function closure}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:number maxThreads}})",
	"listFilter": "(${1:string list}, ${2:function filter}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:number maxThreads}})",
	"listFind": "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}})",
	"listFindNoCase": "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}})",
	"listFirst": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:number count}})",
	"listGetAt": "(${1:string list}, ${2:number position}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}})",
	"listIndexExists": "(${1:string list}, ${2:number index}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}})",
	"listInsertAt": "(${1:string list}, ${2:number position}, ${3:string value}${4:, ${5:string delimiters}}${6:, ${7:boolean includeEmptyFields}})",
	"listItemTrim": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})",
	"listLast": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})",
	"listLen": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})",
	"listMap": "(${1:string list}, ${2:function closure}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:number maxThreads}})",
	"listPrepend": "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})",
	"listQualify": "(${1:string list}, ${2:string qualifier}${3:, ${4:string delimiters}}${5:, ${6:string elements}}${7:, ${8:boolean includeEmptyFields}})",
	"listReduce": "(${1:string list}, ${2:function closure}${3:, ${4:object initalValue}}${5:, ${6:string delimiter}}${7:, ${8:boolean includeEmptyFields}}${9:, ${10:boolean multiCharacterDelimiter}})",
	"listRemoveDuplicates": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean ignoreCase}})",
	"listRest": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:number offset}})",
	"listSetAt": "(${1:string list}, ${2:number position}, ${3:string value}${4:, ${5:string delimiters}}${6:, ${7:boolean includeEmptyFields}})",
	"listSome": "(${1:string list}, ${2:function closure}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:number maxThreads}})",
	"listSort": "(${1:string list}, ${2:string sort_type}${3:, ${4:string sort_order}}${5:, ${6:string delimiters}}${7:, ${8:boolean includeEmptyFields}})",
	"listToArray": "(${1:string list}${2:, ${3:string delimiter}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}})",
	"listTrim": "(${1:string list}${2:, ${3:string delimiters}})",
	"listValueCount": "(${1:string list}, ${2:string value}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}})",
	"listValueCountNoCase": "(${1:string list}, ${2:string value}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}})",
	"location": "(${1:string url}${2:, ${3:boolean addToken}}${4:, ${5:numeric statusCode}})",
	"log": "(${1:number})",
	"log10": "(${1:number})",
	"lsCurrencyFormat": "(${1:object number}${2:, ${3:string type}}${4:, ${5:string locale}})",
	"lsDateFormat": "(${1:any date}${2:, ${3:string mask}}${4:, ${5:string locale}}${6:, ${7:string timezone}})",
	"lsDateTimeFormat": "(${1:any date}${2:, ${3:string mask}}${4:, ${5:string locale}}${6:, ${7:string timezone}})",
	"lsDayOfWeek": "(${1:datetime date}${2:, ${3:string locale}}${4:, ${5:string timezone}})",
	"lsEuroCurrencyFormat": "(${1:object currency_number}${2:, ${3:string type}}${4:, ${5:string locale}})",
	"lsIsCurrency": "(${1:string}${2:, ${3:string locale}})",
	"lsIsDate": "(${1:any string}${2:, ${3:string locale}}${4:, ${5:string timezone}})",
	"lsIsNumeric": "(${1:string}${2:, ${3:string locale}})",
	"lsNumberFormat": "(${1:any number}${2:, ${3:string mask}}${4:, ${5:string locale}})",
	"lsParseCurrency": "(${1:string}${2:, ${3:string locale}})",
	"lsParseDateTime": "(${1:object date}${2:, ${3:string locale}}${4:, ${5:string timezone}}${6:, ${7:string format}})",
	"lsParseEuroCurrency": "(${1:string currency_string}${2:, ${3:string locale}})",
	"lsParseNumber": "(${1:string}${2:, ${3:string locale}})",
	"lsTimeFormat": "(${1:any time}${2:, ${3:string mask}}${4:, ${5:string locale}}${6:, ${7:string timezone}})",
	"lsWeek": "(${1:datetime date}${2:, ${3:string locale}}${4:, ${5:string timezone}})",
	"max": "(${1:number number1}, ${2:number number2})",
	"metaphone": "(${1:string str})",
	"mid": "(${1:string}, ${2:number start}${3:, ${4:number count}})",
	"millisecond": "(${1:datetime date}${2:, ${3:string timezone}})",
	"min": "(${1:number number1}, ${2:number number2})",
	"minute": "(${1:datetime date}${2:, ${3:string timezone}})",
	"month": "(${1:datetime Date}${2:, ${3:string timezone}})",
	"monthAsString": "(${1:number monthnumber}${2:, ${3:string locale}})",
	"monthShortAsString": "(${1:number monthnumber})",
	"newLine": "()",
	"now": "()",
	"nowServer": "()",
	"nullValue": "()",
	"numberFormat": "(${1:any number}${2:, ${3:string mask}})",
	"objectEquals": "(${1:any left}, ${2:any right})",
	"objectLoad": "(${1:any input})",
	"objectSave": "(${1:any input}${2:, ${3:string filepath}})",
	"ormClearSession": "(${1:string datasource})",
	"ormCloseAllSessions": "()",
	"ormCloseSession": "(${1:string datasource})",
	"ormEvictCollection": "(${1:String entityName}, ${2:String collectionName}${3:, ${4:String primaryKey}})",
	"ormEvictEntity": "(${1:String entityName}${2:, ${3:String primaryKey}})",
	"ormEvictQueries": "(${1:String cacheName}${2:, ${3:string datasource}})",
	"ormExecuteQuery": "(${1:string hql}${2:, ${3:any paramsOrUnique}}${4:, ${5:any uniqueOrQueryOptions}}${6:, ${7:any queryOptions}})",
	"ormFlush": "(${1:string datasource})",
	"ormGetSession": "(${1:string datasource})",
	"ormGetSessionFactory": "(${1:string datasource})",
	"ormReload": "()",
	"pagePoolClear": "()",
	"pagePoolList": "()",
	"paragraphFormat": "(${1:string})",
	"parameterExists": "(${1:variablestring parameter})",
	"parseDateTime": "(${1:object date}${2:, ${3:string popConversion}}${4:, ${5:string timezone}})",
	"parseNumber": "(${1:string nummber}${2:, ${3:string radix}})",
	"pi": "()",
	"precisionEvaluate": "()",
	"preserveSingleQuotes": "(${1:string})",
	"quarter": "(${1:datetime date}${2:, ${3:string timezone}})",
	"query": "()",
	"queryAddColumn": "(${1:query}, ${2:string column}${3:, ${4:any datatype_or_array}}${5:, ${6:any array}})",
	"queryAddRow": "(${1:query}${2:, ${3:any numberOrData}})",
	"queryColumnArray": "(${1:query})",
	"queryColumnCount": "(${1:query})",
	"queryColumnData": "(${1:query}, ${2:string columnName}${3:, ${4:function closure}})",
	"queryColumnExists": "(${1:query}, ${2:string column})",
	"queryColumnList": "(${1:query}${2:, ${3:string delimiter}})",
	"queryConvertForGrid": "(${1:query}, ${2:number page}, ${3:number pageSize})",
	"queryCurrentRow": "(${1:query})",
	"queryDeleteColumn": "(${1:query}, ${2:String column})",
	"queryDeleteRow": "(${1:query}${2:, ${3:number row}})",
	"queryEach": "(${1:query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"queryEvery": "(${1:query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"queryExecute": "(${1:string sql}${2:, ${3:any params}}${4:, ${5:struct options}})",
	"queryFilter": "(${1:query}, ${2:function filter}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"queryGetCell": "(${1:query}, ${2:string column_name}${3:, ${4:number row_number}})",
	"queryGetRow": "(${1:query}, ${2:number rowNumber})",
	"queryMap": "(${1:query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"queryNew": "(${1:object columnNames}${2:, ${3:object columnTypes}}${4:, ${5:any data}})",
	"queryRecordCount": "(${1:query})",
	"queryReduce": "(${1:query}, ${2:function closure}${3:, ${4:object initalValue}})",
	"queryRowData": "(${1:query}, ${2:number rowNumber})",
	"querySetCell": "(${1:query}, ${2:string column_name}, ${3:any value}${4:, ${5:number row_number}})",
	"querySlice": "(${1:query}, ${2:number offset}${3:, ${4:number length}})",
	"querySome": "(${1:query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"querySort": "(${1:query}, ${2:string column_name}${3:, ${4:string direction}})",
	"quotedValueList": "(${1:queryColumn query_column}${2:, ${3:string delimiter}})",
	"rJustify": "(${1:string}, ${2:number length})",
	"rTrim": "(${1:string})",
	"rand": "(${1:string algorithm})",
	"randRange": "(${1:number number1}, ${2:number number2}${3:, ${4:string algorithm}})",
	"randomize": "(${1:number}${2:, ${3:string algorithm}})",
	"reFind": "(${1:string reg_expression}, ${2:string}${3:, ${4:number start}}${5:, ${6:boolean returnsubexpressions}})",
	"reFindNoCase": "(${1:string reg_expression}, ${2:string}${3:, ${4:number start}}${5:, ${6:boolean returnsubexpressions}})",
	"reMatch": "(${1:string regex}, ${2:string})",
	"reMatchNoCase": "(${1:string reg_expression}, ${2:string})",
	"reReplace": "(${1:string}, ${2:string reg_expression}, ${3:string substring}${4:, ${5:string scope}})",
	"reReplaceNoCase": "(${1:string}, ${2:string reg_expression}, ${3:string substring}${4:, ${5:string scope}})",
	"releaseComObject": "(${1:any comObject})",
	"removeChars": "(${1:string}, ${2:number start}, ${3:number count})",
	"repeatString": "(${1:string}, ${2:number count})",
	"replace": "(${1:string}, ${2:any substring1}${3:, ${4:string substring2}}${5:, ${6:string scope}})",
	"replaceList": "(${1:string}, ${2:string list1}, ${3:string list2}${4:, ${5:string delimiter_list1}}${6:, ${7:string delimiter_list2}})",
	"replaceNoCase": "(${1:string}, ${2:any substring1}${3:, ${4:string substring2}}${5:, ${6:string scope}})",
	"restDeleteApplication": "(${1:string dirPath}${2:, ${3:string password}})",
	"restInitApplication": "(${1:string dirPath}${2:, ${3:string serviceMapping}}${4:, ${5:boolean default}}${6:, ${7:string password}})",
	"restSetResponse": "(${1:struct response})",
	"reverse": "(${1:string})",
	"right": "(${1:string}, ${2:number count})",
	"round": "(${1:number}${2:, ${3:number precision}})",
	"second": "(${1:datetime date}${2:, ${3:string timezone}})",
	"sendGatewayMessage": "(${1:string gatewayID}, ${2:struct data})",
	"serialize": "(${1:any object})",
	"serializeJSON": "(${1:any var}${2:, ${3:boolean serializeQueryByColumns}}${4:, ${5:string charset}})",
	"sessionInvalidate": "()",
	"sessionRotate": "()",
	"sessionstartTime": "()",
	"setEncoding": "(${1:string scope}, ${2:string encoding})",
	"setLocale": "(${1:string new_locale})",
	"setProfileString": "(${1:string iniPath}, ${2:string section}, ${3:string entry}, ${4:string value})",
	"setTimezone": "(${1:string timezone})",
	"setVariable": "(${1:string name}, ${2:any value})",
	"sgn": "(${1:number})",
	"sin": "(${1:number})",
	"sizeOf": "(${1:object obj}${2:, ${3:boolean complex}})",
	"sleep": "(${1:number duration})",
	"soundEx": "(${1:string str})",
	"spanExcluding": "(${1:string}, ${2:string set})",
	"spanIncluding": "(${1:string}, ${2:string set})",
	"spreadsheetNew": "(${1:any sheetName}${2:, ${3:any xmlFormat}})",
	"spreadsheetSetCellValue": "(${1:excel spreadSheet}, ${2:string value}, ${3:number row}, ${4:number column})",
	"spreadsheetWrite": "(${1:excel spreadSheet}, ${2:string path}${3:, ${4:any password}}${5:, ${6:boolean overwrite}})",
	"sqr": "(${1:number})",
	"sslCertificateInstall": "(${1:string host}${2:, ${3:number port}})",
	"sslCertificateList": "(${1:string host}${2:, ${3:number port}})",
	"storeAddAcl": "(${1:string url}, ${2:object aclObject})",
	"storeGetAcl": "(${1:string url})",
	"storeSetAcl": "(${1:string url}, ${2:object aclObject})",
	"stringLen": "(${1:string})",
	"stripCr": "(${1:string})",
	"structAppend": "(${1:struct Struct1}, ${2:struct Struct2}${3:, ${4:boolean OverwriteFlag}})",
	"structClear": "(${1:struct structure})",
	"structCopy": "(${1:struct structure})",
	"structCount": "(${1:struct structure})",
	"structDelete": "(${1:struct structure}, ${2:string key}${3:, ${4:boolean indicatenotexisting}})",
	"structEach": "(${1:struct}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"structEvery": "(${1:struct}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"structFilter": "(${1:struct}, ${2:function filter}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"structFind": "(${1:struct structure}, ${2:string key}${3:, ${4:any defaultValue}})",
	"structFindKey": "(${1:struct Top}, ${2:string Key}${3:, ${4:string Scope}})",
	"structFindValue": "(${1:struct Top}, ${2:string Key}${3:, ${4:string Scope}})",
	"structGet": "(${1:string PathDesired})",
	"structInsert": "(${1:struct structure}, ${2:string key}, ${3:any value}${4:, ${5:boolean allowoverwrite}})",
	"structIsEmpty": "(${1:struct structure})",
	"structKeyArray": "(${1:struct structure})",
	"structKeyExists": "(${1:struct structure}, ${2:string key})",
	"structKeyList": "(${1:struct structure}${2:, ${3:string delimiter}})",
	"structKeyTranslate": "(${1:struct structure}${2:, ${3:boolean deepTranslation}}${4:, ${5:boolean leaveOriginalKey}})",
	"structMap": "(${1:struct}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"structNew": "(${1:string type})",
	"structReduce": "(${1:struct}, ${2:function closure}${3:, ${4:object initalValue}})",
	"structSome": "(${1:struct}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
	"structSort": "(${1:struct base}${2:, ${3:string sortType}}${4:, ${5:string sortOrder}}${6:, ${7:string pathToSubElement}})",
	"structUpdate": "(${1:struct structure}, ${2:string key}, ${3:any value})",
	"systemCacheClear": "(${1:string cacheName})",
	"systemOutput": "(${1:Object obj}${2:, ${3:boolean addNewLine}}${4:, ${5:boolean doErrorStream}})",
	"tan": "(${1:number})",
	"threadJoin": "(${1:string name}${2:, ${3:numeric timeout}})",
	"threadTerminate": "(${1:string name})",
	"throw": "(${1:string message}${2:, ${3:string type}}${4:, ${5:string detail}}${6:, ${7:string errorcode}}${8:, ${9:string extendedInfo}}${10:, ${11:any object}})",
	"timeFormat": "(${1:any time}${2:, ${3:string mask}}${4:, ${5:string timezone}})",
	"toBase64": "(${1:any strOrBin}${2:, ${3:string encoding}})",
	"toBinary": "(${1:any data}${2:, ${3:string charset}})",
	"toNumeric": "(${1:any value}${2:, ${3:any radix}})",
	"toScript": "(${1:any cfvar}, ${2:string javascriptvar}${3:, ${4:boolean outputformat}}${5:, ${6:boolean ASFormat}})",
	"toString": "(${1:any value}${2:, ${3:string encoding}})",
	"trace": "(${1:struct caller}${2:, ${3:string var}}${4:, ${5:string text}}${6:, ${7:string type}}${8:, ${9:string category}}${10:, ${11:boolean inline}}${12:, ${13:boolean abort}}${14:, ${15:boolean follow}})",
	"transactionCommit": "()",
	"transactionRollback": "()",
	"transactionSetSavePoint": "()",
	"trim": "(${1:string})",
	"trueFalseFormat": "(${1:any value})",
	"uCFirst": "(${1:string}${2:, ${3:boolean doAll}}${4:, ${5:boolean doLowerIfAllUppercase}})",
	"uCase": "(${1:string})",
	"unserializeJava": "(${1:string})",
	"urlDecode": "(${1:string}${2:, ${3:string charset}})",
	"urlEncode": "(${1:string}${2:, ${3:string charset}}${4:, ${5:boolean force}})",
	"urlEncodedFormat": "(${1:string}${2:, ${3:string charset}}${4:, ${5:boolean force}})",
	"urlSessionFormat": "(${1:string url})",
	"val": "(${1:any value})",
	"valueArray": "(${1:queryColumn query_column})",
	"valueList": "(${1:queryColumn query_column}${2:, ${3:string delimiter}})",
	"verifyClient": "()",
	"week": "(${1:datetime date}${2:, ${3:string timezone}})",
	"wrap": "(${1:string}, ${2:number limit}${3:, ${4:boolean strip}})",
	"writeDump": "(${1:object var}${2:, ${3:boolean expand}}${4:, ${5:string format}}${6:, ${7:string hide}}${8:, ${9:numeric keys}}${10:, ${11:string label}}${12:, ${13:boolean metainfo}}${14:, ${15:string output}}${16:, ${17:string show}}${18:, ${19:boolean showUDFs}}${20:, ${21:numeric top}}${22:, ${23:boolean abort}}${24:, ${25:string eval}})",
	"writeLog": "(${1:string text}${2:, ${3:string type}}${4:, ${5:boolean application}}${6:, ${7:string file}}${8:, ${9:string log}})",
	"writeOutput": "(${1:string})",
	"xmlChildPos": "(${1:xml node}, ${2:string childName}, ${3:number index})",
	"xmlElemNew": "(${1:xml xmlObj}${2:, ${3:string namespace_or_childName}}${4:, ${5:string childName}})",
	"xmlFormat": "(${1:string})",
	"xmlGetNodeType": "(${1:xml})",
	"xmlNew": "(${1:boolean caseSensitive})",
	"xmlParse": "(${1:string xmlString}${2:, ${3:boolean caseSensitive}}${4:, ${5:string validator}})",
	"xmlSearch": "(${1:xml}, ${2:string xpath})",
	"xmlTransform": "(${1:any xml}, ${2:string xsl}${3:, ${4:struct parameters}})",
	"xmlValidate": "(${1:string xmlDoc}${2:, ${3:string validator}})",
	"year": "(${1:datetime date}${2:, ${3:string timezone}})",
	"yesNoFormat": "(${1:any value})"
}