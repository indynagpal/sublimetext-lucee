{
  "abs": "(${1:numeric number})",
  "acos": "(${1:numeric number})",
  "addSOAPRequestHeader": "(${1:string webservice}, ${2:string namespace}, ${3:string name}, ${4:string value}, ${5:boolean mustunderstand})",
  "addSOAPResponseHeader": "(${1:string namespace}, ${2:string name}, ${3:string value}${4:, ${5:boolean mustunderstand}})",
  "ajaxLink": "(${1:string url})",
  "ajaxOnLoad": "(${1:string functionname})",
  "applicationStartTime": "()",
  "applicationStop": "()",
  "array": "()",
  "arrayAppend": "(${1:array array}, ${2:any value}${3:, ${4:boolean merge}})",
  "arrayAvg": "(${1:array array})",
  "arrayClear": "(${1:array array})",
  "arrayContains": "(${1:array array}, ${2:any object}${3:, ${4:any substringMatch}})",
  "arrayContainsNoCase": "(${1:array array}, ${2:any object})",
  "arrayDelete": "(${1:array array}, ${2:any object}${3:, ${4:string scope}})",
  "arrayDeleteAt": "(${1:array array}, ${2:numeric position})",
  "arrayEach": "(${1:array array}, ${2:closure closure}${3:, ${4:boolean parallel}}${5:, ${6:boolean maxThreads}})",
  "arrayEvery": "(${1:array array}, ${2:closure closure}${3:, ${4:boolean parallel}}${5:, ${6:boolean maxThreads}})",
  "arrayFilter": "(${1:array array}, ${2:closure function}${3:, ${4:boolean parallel}}${5:, ${6:boolean maxThreads}})",
  "arrayFind": "(${1:array array}, ${2:any object})",
  "arrayFindAll": "(${1:array array}, ${2:variablename object or closure})",
  "arrayFindAllNoCase": "(${1:array array}, ${2:variablename object or closure})",
  "arrayFindNoCase": "(${1:array array}, ${2:any object})",
  "arrayFirst": "(${1:array array})",
  "arrayIndexExists": "(${1:array array}, ${2:number index})",
  "arrayInsertAt": "(${1:array array}, ${2:numeric position}, ${3:any value})",
  "arrayIsDefined": "(${1:string array}, ${2:numeric elementIndex})",
  "arrayIsEmpty": "(${1:array array})",
  "arrayLast": "(${1:array array})",
  "arrayLen": "(${1:array array})",
  "arrayMap": "(${1:array array}, ${2:any function})",
  "arrayMax": "(${1:array array})",
  "arrayMedian": "(${1:array array})",
  "arrayMerge": "(${1:array array1}, ${2:array array2}${3:, ${4:boolean leaveIndex}})",
  "arrayMid": "(${1:array array}, ${2:number start}${3:, ${4:number count}})",
  "arrayMin": "(${1:array array})",
  "arrayNew": "(${1:numeric dimension})",
  "arrayPrepend": "(${1:array array}, ${2:object value})",
  "arrayReduce": "(${1:array array}, ${2:any function}, ${3:any initialValue})",
  "arrayResize": "(${1:array array}, ${2:numeric size})",
  "arrayReverse": "(${1:array array})",
  "arraySet": "(${1:array array}, ${2:numeric start_pos}, ${3:numeric end_pos}, ${4:object value})",
  "arraySlice": "(${1:array array}, ${2:numeric offset}${3:, ${4:numeric length}})",
  "arraySome": "(${1:array array}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "arraySort": "(${1:array array}, ${2:string sort_type}${3:, ${4:string sort_order}}${5:, ${6:any callback}})",
  "arraySum": "(${1:array array})",
  "arraySwap": "(${1:array array}, ${2:numeric position1}, ${3:numeric position2})",
  "arrayToList": "(${1:array array}${2:, ${3:string delimiter}})",
  "arrayToStruct": "(${1:array array})",
  "asc": "(${1:string String})",
  "asin": "(${1:numeric number})",
  "atn": "(${1:numeric number})",
  "beat": "(${1:any time})",
  "binaryDecode": "(${1:string String}, ${2:string binaryencoding})",
  "binaryEncode": "(${1:binary binarydata}, ${2:string encoding})",
  "bitAnd": "(${1:numeric number1}, ${2:numeric number2})",
  "bitMaskClear": "(${1:numeric number}, ${2:numeric start}, ${3:numeric length})",
  "bitMaskRead": "(${1:numeric number}, ${2:numeric start}, ${3:numeric length})",
  "bitMaskSet": "(${1:numeric number}, ${2:numeric mask}, ${3:numeric start}, ${4:numeric length})",
  "bitNot": "(${1:numeric number})",
  "bitOr": "(${1:numeric number1}, ${2:numeric number2})",
  "bitShln": "(${1:numeric number}, ${2:numeric count})",
  "bitShrn": "(${1:numeric number}, ${2:numeric count})",
  "bitXor": "(${1:numeric number1}, ${2:numeric number2})",
  "cacheClear": "(${1:string filter}${2:, ${3:string cacheName}})",
  "cacheCount": "(${1:string cacheName})",
  "cacheDelete": "(${1:string id}${2:, ${3:boolean throwOnError}}${4:, ${5:string cacheName}})",
  "cacheGet": "(${1:string id})",
  "cacheGetAll": "(${1:string filter}${2:, ${3:string cacheName}})",
  "cacheGetAllIds": "()",
  "cacheGetDefaultCacheName": "(${1:string type})",
  "cacheGetMetadata": "(${1:string id})",
  "cacheGetProperties": "(${1:string type})",
  "cacheGetSession": "(${1: objectType}${2:, ${3:boolean isKey}})",
  "cacheIdExists": "(${1: id}${2:, ${3: region}})",
  "cacheKeyExists": "(${1:string key}${2:, ${3:string cacheName}})",
  "cachePut": "(${1:string id}, ${2:string value}${3:, ${4:datetime timespan}}${5:, ${6:datetime idleTime}})",
  "cacheRegionExists": "(${1: region})",
  "cacheRegionNew": "(${1: region}${2:, ${3: properties}}${4:, ${5: throwOnError}})",
  "cacheRegionRemove": "(${1: region})",
  "cacheRemove": "(${1:string ids}${2:, ${3:boolean throwOnError}})",
  "cacheRemoveAll": "(${1: region})",
  "cacheSetProperties": "(${1: Param1})",
  "callStackDump": "(${1: destination})",
  "callStackGet": "()",
  "canonicalize": "(${1:string input}, ${2:boolean restrictMultiple}, ${3:boolean restrictMixed}${4:, ${5:boolean throwOnError}})",
  "ceiling": "(${1:numeric number})",
  "cfusion_Decrypt": "(${1:string string}, ${2:string key})",
  "cfusion_Encrypt": "(${1:string string}, ${2:string key})",
  "charsetDecode": "(${1:string String}, ${2:string encoding})",
  "charsetEncode": "(${1:binary binaryobject}, ${2:string encoding})",
  "chr": "(${1:numeric number})",
  "cjustify": "(${1:string String}, ${2:numeric length})",
  "collectionEach": "(${1:object collection}, ${2:function closure})",
  "collectionEvery": "(${1:object collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "collectionFilter": "(${1:object collection}, ${2:function filter}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "collectionMap": "(${1:object collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "collectionReduce": "(${1:object collection}, ${2:function closure}${3:, ${4:object initalValue}})",
  "collectionSome": "(${1:object collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "compare": "(${1:string string1}, ${2:string string2})",
  "compareNoCase": "(${1:string string1}, ${2:string string2})",
  "componentCacheClear": "()",
  "componentCacheList": "()",
  "componentInfo": "(${1:component component})",
  "compress": "(${1:string format}, ${2:string source}, ${3:string target}${4:, ${5:boolean includeBaseFolder}}${6:, ${7:string mode}})",
  "contractPath": "(${1:string path}${2:, ${3:boolean placeholder}})",
  "cos": "(${1:numeric number})",
  "createDate": "(${1:numeric year}, ${2:numeric month}, ${3:numeric day})",
  "createDateTime": "(${1:numeric year}, ${2:numeric month}, ${3:numeric day}, ${4:numeric hour}, ${5:numeric minute}, ${6:numeric second})",
  "createDynamicProxy": "(${1: fullyQualifiedNameOfCFC}${2:, ${3: interfaceName}})",
  "createGUID": "()",
  "createObject": "(${1:string type}, ${2:string context}, ${3:string class}, ${4:string locale}, ${5:string servername}, ${6:string component_name}, ${7:string urltowsdl}${8:, ${9:string portname}})",
  "createODBCDate": "(${1:datetime date})",
  "createODBCDateTime": "(${1:datetime date})",
  "createODBCTime": "(${1:datetime date})",
  "createTime": "(${1:numeric hour}, ${2:numeric minute}, ${3:numeric second})",
  "createTimespan": "(${1:numeric days}, ${2:numeric hours}, ${3:numeric minutes}, ${4:numeric seconds})",
  "createUniqueID": "()",
  "createUUID": "()",
  "CSRFGenerateToken": "(${1:string key}${2:, ${3:boolean forceNew}})",
  "CSRFVerifyToken": "(${1:string token}${2:, ${3:string key}})",
  "ctCacheClear": "()",
  "ctCacheList": "()",
  "datasourceFlushMetacache": "(${1:string datasourceName})",
  "dateAdd": "(${1:string datepart}, ${2:numeric number}, ${3:datetime date})",
  "dateCompare": "(${1:datetime date1}, ${2:datetime date2}${3:, ${4:string datePart}})",
  "dateConvert": "(${1:string type}, ${2:datetime date})",
  "dateDiff": "(${1:string datepart}, ${2:datetime date1}, ${3:datetime date2})",
  "dateFormat": "(${1:datetime date}${2:, ${3:string mask}})",
  "datePart": "(${1:string datepart}, ${2:datetime date})",
  "dateTimeFormat": "(${1:datetime dateTime}${2:, ${3:string mask}}${4:, ${5:string timezone}})",
  "day": "(${1:datetime date})",
  "dayOfWeek": "(${1:datetime date})",
  "dayOfWeekAsString": "(${1:numeric day_of_week})",
  "dayOfWeekShortAsString": "(${1:number day_of_week}${2:, ${3:string locale}})",
  "dayOfYear": "(${1:datetime date})",
  "daysInMonth": "(${1:datetime date})",
  "daysInYear": "(${1:datetime date})",
  "de": "(${1:string String})",
  "decimalFormat": "(${1:numeric number})",
  "decodeForHTML": "(${1: inputString})",
  "decodeFromURL": "(${1: inputString})",
  "decrementValue": "(${1:numeric number})",
  "decrypt": "(${1:string encrypted_string}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}}${7:, ${8:binary ivorsalt}}${9:, ${10:numeric iterations}})",
  "decryptBinary": "(${1:string bytes}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:binary ivorsalt}}${7:, ${8:numeric iterations}})",
  "deleteClientVariable": "(${1:string name})",
  "deserialize": "(${1: StringToBeDeserialized}, ${2: type}, ${3: useCustomSerializer})",
  "deserializeJSON": "(${1:string jsonvar}${2:, ${3:boolean strictMapping}}, ${4:boolean useCustomSerializer})",
  "deserializeXML": "(${1: StringToBeDeserialized}, ${2: useCustomSerializer})",
  "directoryCopy": "(${1:string source}, ${2:string destination}${3:, ${4:boolean recurse}}${5:, ${6:any filter}}${7:, ${8:boolean createPath}})",
  "directoryCreate": "(${1:string path})",
  "directoryDelete": "(${1:string path}, ${2:boolean recurse})",
  "directoryExists": "(${1:string absolute_path})",
  "directoryList": "(${1:string path}${2:, ${3:boolean recurse}}${4:, ${5:string listInfo}}${6:, ${7:string filter}}${8:, ${9:string sort}}${10:, ${11:string type}})",
  "directoryRename": "(${1:string path}, ${2:string newPath})",
  "directorySize": "(${1:string path})",
  "dollarFormat": "(${1:numeric number})",
  "dotnetToCFType": "(${1:varible variable_name})",
  "duplicate": "(${1:object variable})",
  "each": "(${1:object collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "echo": "(${1:string string})",
  "empty": "(${1:variablestring variable})",
  "encodeForCSS": "(${1: inputString}${2:, ${3: canonicalize}})",
  "encodeForDN": "(${1: string})",
  "encodeForHTML": "(${1:string inputString}${2:, ${3:boolean canonicalize}})",
  "encodeForHTMLAttribute": "(${1:string inputString}${2:, ${3:boolean canonicalize}})",
  "encodeForJavaScript": "(${1:string inputString}${2:, ${3:boolean canonicalize}})",
  "encodeForLDAP": "(${1: string})",
  "encodeForURL": "(${1: inputString}${2:, ${3: canonicalize}})",
  "encodeForXML": "(${1: inputString}${2:, ${3: canonicalize}})",
  "encodeForXMLAttribute": "(${1: inputString}${2:, ${3: canonicalize}})",
  "encodeForXPath": "(${1: inputString}${2:, ${3: canonicalize}})",
  "encrypt": "(${1:string String}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}}${7:, ${8:binary ivorsalt}}${9:, ${10:numeric iterations}})",
  "encryptBinary": "(${1:string bytes}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:binary ivorsalt}}${7:, ${8:numeric iterations}})",
  "entityDelete": "(${1:variablename entity})",
  "entityLoad": "(${1:string entityName}${2:, ${3:any filterCriteria}}${4:, ${5:boolean unique}}${6:, ${7:string sortOrder}}${8:, ${9:struct options}})",
  "entityLoadByExample": "(${1:string sampleEntity}${2:, ${3:boolean unique}})",
  "entityLoadByPK": "(${1:string entityName}, ${2:object id})",
  "entityMerge": "(${1:variablename entity})",
  "entityNameArray": "()",
  "entityNameList": "(${1:string delimiter})",
  "entityNew": "(${1:string entityName})",
  "entityReload": "(${1:variablename entity})",
  "entitySave": "(${1:variablename entity}${2:, ${3:boolean forceInsert}})",
  "entityToQuery": "(${1:variablename orm_object}${2:, ${3:string entity_name}})",
  "esapiDecode": "(${1:string decodeFrom}, ${2:string string})",
  "ESAPIEncode": "(${1:string encodeFor}, ${2:string string})",
  "evaluate": "(${1:string expression1}${2:, ${3:string expression2}}${4:, ${5:string expressionN}})",
  "exp": "(${1:numeric number})",
  "expandPath": "(${1:string relative_path})",
  "extract": "(${1:string format}, ${2:string source}, ${3:string target})",
  "fileAppend": "(${1:string filePath}, ${2:string data}${3:, ${4:string charset}})",
  "fileClose": "(${1:variablename fileObj})",
  "fileCopy": "(${1:string source}, ${2:string destination})",
  "fileDelete": "(${1: file})",
  "fileExists": "(${1:string path})",
  "fileGetMimeType": "(${1: path}, ${2: fileObject}, ${3: strict})",
  "fileIsEOF": "(${1:object fileObject})",
  "fileMove": "(${1: source}, ${2: destination})",
  "fileOpen": "(${1: filePath}${2:, ${3: mode}}${4:, ${5: charset}})",
  "fileRead": "(${1:string filepath}${2:, ${3:string charset}})",
  "fileReadBinary": "(${1:string filePath})",
  "fileReadLine": "(${1: fileObj})",
  "fileSeek": "(${1:variablename file}, ${2:numeric position})",
  "fileSetAccessMode": "(${1:string filePath}, ${2:string mode})",
  "fileSetAttribute": "(${1:string filePath}, ${2:string attribute})",
  "fileSetLastModified": "(${1:string filePath}, ${2:datetime date})",
  "fileSkipBytes": "(${1:variablename file}, ${2:numeric bytes})",
  "fileUpload": "(${1:string destination}${2:, ${3:string fileField}}${4:, ${5:string accept}}${6:, ${7:string nameConflict}})",
  "fileUploadAll": "(${1:string destination}${2:, ${3:string accept}}${4:, ${5:string nameConflict}})",
  "fileWrite": "(${1:string filePath}, ${2:string data}${3:, ${4:string charset}})",
  "fileWriteLine": "(${1: file}, ${2: content})",
  "find": "(${1:string substring}, ${2:string String}${3:, ${4:numeric start}})",
  "findNoCase": "(${1:string substring}, ${2:string String}${3:, ${4:numeric start}})",
  "findOneOf": "(${1:string set}, ${2:string string}${3:, ${4:numeric start}})",
  "firstDayOfMonth": "(${1:datetime date})",
  "fix": "(${1:numeric number})",
  "formatBaseN": "(${1:numeric number}, ${2:numeric radix})",
  "generatePBKDFKey": "(${1:string algorithm}, ${2:string passphrase}, ${3:string salt}, ${4:numeric iterations}, ${5:numeric keysize})",
  "generateSecretKey": "(${1:string algorithm})",
  "getApplicationMetadata": "()",
  "getApplicationSettings": "(${1:boolean suppressFunction})",
  "getAuthUser": "()",
  "getBaseTagData": "(${1:string tagname}${2:, ${3:numeric instancenumber}})",
  "getBaseTagList": "()",
  "getBaseTemplatePath": "()",
  "getBuiltinFunction": "(${1:string name})",
  "getCanonicalPath": "(${1:string path})",
  "getClassPath": "()",
  "getClientVariablesList": "()",
  "getComponentMetadata": "(${1:string path})",
  "getContextRoot": "()",
  "getCpuUsage": "(${1: long ms})",
  "getCurrentContext": "()",
  "getCurrentTemplatePath": "()",
  "getDirectoryFromPath": "(${1:string path})",
  "getEncoding": "(${1:string scope_name})",
  "getException": "(${1:object javaobject})",
  "getFileFromPath": "(${1:string path})",
  "getFileInfo": "(${1:string path})",
  "getFreeSpace": "(${1: path})",
  "getFunctionCalledName": "()",
  "getFunctionData": "(${1:string functionName})",
  "getFunctionKeywords": "()",
  "getFunctionList": "()",
  "getGatewayHelper": "(${1:string gatewayID})",
  "getHTTPRequestData": "()",
  "getHTTPTimeString": "(${1:datetime DateTime})",
  "getK2ServerDocCount": "()",
  "getK2ServerDoccountLimit": "()",
  "getLocale": "()",
  "getLocaleDisplayName": "()",
  "getLocalhostIP": "()",
  "getLuceeID": "()",
  "getMemoryUsage": "(${1:string type})",
  "getMetadata": "(${1:object Object})",
  "getMetricData": "(${1:string mode})",
  "getNumericDate": "(${1:any arg1})",
  "getPageContext": "()",
  "getPrinterInfo": "(${1:string printer})",
  "getPrinterList": "(${1:string printer})",
  "getProfileSections": "(${1:string inifile})",
  "getProfileString": "(${1:string inipath}, ${2:string section}, ${3:string entry})",
  "getReadableImageFormats": "()",
  "getSafeHTML": "(${1:string inputString}, ${2:string PolicyFile}, ${3:boolean throwOnError})",
  "getSOAPRequest": "()",
  "getSOAPRequestHeader": "(${1:string namespace}, ${2:string name}${3:, ${4:boolean asXML}})",
  "getSOAPResponse": "(${1:string webservice})",
  "getSOAPResponseHeader": "(${1:object webservice}, ${2:string namespace}, ${3:string name}${4:, ${5:boolean asXML}})",
  "getSystemFreeMemory": "()",
  "getSystemTotalMemory": "(${1: region})",
  "getTagData": "(${1:string nameSpaceWithSeperator}, ${2:string tagName})",
  "getTagList": "()",
  "getTempDirectory": "()",
  "getTempFile": "(${1:string dir}, ${2:string prefix})",
  "getTemplatePath": "()",
  "getTickCount": "()",
  "getTimezone": "()",
  "getTimezoneInfo": "(${1:string text})",
  "getToken": "(${1:string String}, ${2:numeric index}${3:, ${4:string delimiters}})",
  "getTotalSpace": "(${1: path})",
  "getUserRoles": "()",
  "getVariable": "(${1:string name})",
  "getVFSMetadata": "(${1:string fileSystemType})",
  "getWriteableImageFormats": "()",
  "hash": "(${1:string String}${2:, ${3:string algorithm}}${4:, ${5:string encoding}}${6:, ${7:numeric iterations}})",
  "hash40": "(${1:any input}${2:, ${3:string algorithm}}${4:, ${5:string encoding}}${6:, ${7:number numIterations}})",
  "hmac": "(${1:string message}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}})",
  "hour": "(${1:datetime date})",
  "HTMLCodeFormat": "(${1:string String}${2:, ${3:numeric version}})",
  "HTMLEditFormat": "(${1:string String}${2:, ${3:numeric version}})",
  "HTMLParse": "(${1:string html}${2:, ${3:boolean caseSensitive}})",
  "iIf": "(${1:boolean condition}, ${2:string expression1}, ${3:string expression2})",
  "imageAddBorder": "(${1:string name}, ${2:string thickness}${3:, ${4:string color}}${5:, ${6:string bordertype}})",
  "imageBlur": "(${1:string name}${2:, ${3:numeric blurradius}})",
  "imageClearRect": "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height})",
  "imageCopy": "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}${6:, ${7:numeric dx}}${8:, ${9:numeric dy}})",
  "imageCreateCaptcha": "(${1: height}, ${2: width}, ${3: text}${4:, ${5: difficulty}}${6:, ${7: font}}${8:, ${9: fontsize}})",
  "imageCrop": "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height})",
  "imageDrawArc": "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}, ${6:numeric startAngle}, ${7:numeric archAngle}${8:, ${9:boolean filled}})",
  "imageDrawBeveledRect": "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}, ${6:boolean raised}${7:, ${8:boolean filled}})",
  "imageDrawCubicCurve": "(${1: name}, ${2:string ctrlx1}, ${3:numeric ctrly1}, ${4:numeric ctrlx2}, ${5:numeric ctrly2}, ${6:numeric x1}, ${7:numeric y1}, ${8:numeric x2}, ${9:numeric y2})",
  "imageDrawImage": "(${1:any name}, ${2:any image}, ${3:number x}, ${4:number y})",
  "imageDrawLine": "(${1:string name}, ${2:numeric x1}, ${3:numeric y1}, ${4:numeric x2}, ${5:numeric y2})",
  "imageDrawLines": "(${1:string name}, ${2:numeric xcords}, ${3:numeric ycords}${4:, ${5:boolean isPolygon}}${6:, ${7:boolean filled}})",
  "imageDrawOval": "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}${6:, ${7:boolean filled}})",
  "imageDrawPoint": "(${1:string name}, ${2:numeric x}, ${3:numeric y})",
  "imageDrawQuadraticCurve": "(${1: name}, ${2:numeric x1}, ${3:numeric y1}, ${4:string ctrlx1}, ${5:numeric ctrly1}, ${6:numeric x2}, ${7:numeric y2})",
  "imageDrawRect": "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}${6:, ${7:boolean filled}})",
  "imageDrawRoundRect": "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}, ${6:numeric arcwidth}, ${7:numeric archeight}${8:, ${9:boolean filled}})",
  "imageDrawText": "(${1:string name}, ${2:string str}, ${3:numeric x}, ${4:numeric y}${5:, ${6:struct attributecollection}})",
  "imageFilter": "(${1:any name}, ${2:string filtername}${3:, ${4:struct parameters}})",
  "imageFilterColorMap": "(${1:string type}${2:, ${3:string lineColor1}}${4:, ${5:string lineColor2}})",
  "imageFilterCurves": "()",
  "imageFilterKernel": "(${1:number width}, ${2:number height}, ${3:any data})",
  "imageFilterWarpGrid": "(${1:number rows}, ${2:number cols}, ${3:number width}, ${4:number height})",
  "imageFlip": "(${1:string name}, ${2:string transpose})",
  "imageFonts": "()",
  "imageFormats": "()",
  "imageGetBlob": "(${1:string source})",
  "imageGetBufferedImage": "(${1:string name})",
  "imageGetExifMetaData": "(${1:string name})",
  "imageGetEXIFTag": "(${1:string name}, ${2:string tagName})",
  "imageGetHeight": "(${1:string name})",
  "imageGetIPTCMetaData": "(${1:string name})",
  "imageGetIPTCtag": "(${1:string name}, ${2:string tagName})",
  "imageGetMetadata": "(${1:string name})",
  "imageGetWidth": "(${1:string name})",
  "imageGrayScale": "(${1:string name})",
  "imageInfo": "(${1:string name})",
  "imageMakeColorTransparent": "(${1: img}, ${2: color})",
  "imageMakeTranslucent": "(${1: img}, ${2: percentage})",
  "imageNegative": "(${1:string name})",
  "imageNew": "(${1:string source}${2:, ${3:numeric width}}${4:, ${5:numeric height}}${6:, ${7:string imagetype}}${8:, ${9:string canvascolor}})",
  "imageOverlay": "(${1:string source1}, ${2:string source2}${3:, ${4:string rule}}${5:, ${6:string alpha}})",
  "imagePaste": "(${1:string image1}, ${2:string image2}, ${3:numeric x}, ${4:numeric y})",
  "imageRead": "(${1:string path})",
  "imageReadBase64": "(${1:string string})",
  "imageResize": "(${1:string name}, ${2:numeric width}, ${3:numeric height}${4:, ${5:string interpolation}}${6:, ${7:boolean blurfactor}})",
  "imageRotate": "(${1:string name}, ${2:numeric angle}${3:, ${4:numeric x}}${5:, ${6:numeric y}}${7:, ${8:string interpolation}})",
  "imageRotateDrawingAxis": "(${1:string name}, ${2:numeric angle}${3:, ${4:numeric x}}${5:, ${6:numeric y}})",
  "imageScaleTofit": "(${1:string name}, ${2:numeric fitWidth}, ${3:numeric fitHeight}${4:, ${5:string interpolation}}${6:, ${7:boolean blurfactor}})",
  "imageSetAntialiasing": "(${1:string name}${2:, ${3:boolean antialias}})",
  "imageSetBackgroundColor": "(${1: name}, ${2: color})",
  "imageSetDrawingAlpha": "(${1:any name}, ${2:number alpha})",
  "imageSetDrawingColor": "(${1:string name}, ${2: color})",
  "imageSetDrawingStroke": "(${1:string name}${2:, ${3:struct attributecollection}})",
  "imageSetDrawingTransparency": "(${1:stirng name}, ${2:numeric percent})",
  "imageSharpen": "(${1:string name}${2:, ${3:numeric gain}})",
  "imageShear": "(${1:string name}, ${2:numeric shear}${3:, ${4:string direction}}${5:, ${6:string interpolation}})",
  "imageShearDrawingAxis": "(${1:string name}, ${2:numeric shrx}, ${3:numeric shry})",
  "imageTranslate": "(${1:string name}, ${2:numeric xTrans}, ${3:numeric yTrans}${4:, ${5:string interpolation}})",
  "imageTranslateDrawingAxis": "(${1: name}, ${2:numeric x}, ${3:numeric y})",
  "imageWrite": "(${1:string name}${2:, ${3:string destination}}${4:, ${5:string quality}}${6:, ${7:boolean overwrite}})",
  "imageWriteBase64": "(${1:string name}, ${2:string destination}, ${3:string format}${4:, ${5:boolean inHTMLFormat}}${6:, ${7:boolean overwrite}})",
  "imageXORDrawingMode": "(${1:string name}, ${2:string c1})",
  "incrementValue": "(${1:numeric number})",
  "inputBaseN": "(${1:string String}, ${2:string radix})",
  "insert": "(${1:string substring}, ${2:string String}, ${3:numeric position})",
  "int": "(${1:numeric number})",
  "invalidateOauthAccesstoken": "(${1: token}, ${2: type})",
  "invoke": "(${1:string cfcinstance}, ${2:string methodname}${3:, ${4:struct arguments}})",
  "isArray": "(${1:object value}${2:, ${3:numeric number}})",
  "isBinary": "(${1:object value})",
  "isBoolean": "(${1:object value})",
  "isClosure": "(${1:any object})",
  "isCustomFunction": "(${1:object Object})",
  "isDate": "(${1:object Object})",
  "isDDX": "(${1:string path})",
  "isDebugMode": "()",
  "isDefined": "(${1:string variable_name})",
  "isEmpty": "(${1:any value})",
  "isFileObject": "(${1: filePath})",
  "isImage": "(${1:string name})",
  "isImageFile": "(${1:string path})",
  "isInstanceOf": "(${1:object object}, ${2:string typename})",
  "isIPInRange": "(${1:any ips}, ${2:string ip})",
  "isIPV6": "(${1:string IP})",
  "isJSON": "(${1:string var})",
  "isLeapYear": "(${1:numeric year})",
  "isLocalhost": "(${1:string ipaddress})",
  "isNotMap": "(${1:any obj})",
  "isNull": "(${1:variablename object})",
  "isNumeric": "(${1:string String})",
  "isNumericDate": "(${1:numeric number})",
  "isObject": "(${1:object value})",
  "isPDFFile": "(${1:string path})",
  "isPDFObject": "(${1:variablename value})",
  "isQuery": "(${1:string value})",
  "isSafeHTML": "(${1:string inputString}, ${2:string PolicyFile}, ${3:boolean throwOnError})",
  "isSimpleValue": "(${1:object value})",
  "isSOAPRequest": "()",
  "isSpreadsheetFile": "(${1:string file})",
  "isSpreadsheetObject": "(${1:variablename object})",
  "isStruct": "(${1:object variable})",
  "isUserInAnyRole": "(${1:string roleList})",
  "isUserInRole": "(${1:string role_name})",
  "isUserLoggedIn": "()",
  "isValid": "(${1:string type}, ${2:object value}, ${3:numeric min}, ${4:numeric max}, ${5:string pattern})",
  "isValidOauthAccesstoken": "(${1: token}, ${2: type})",
  "isVideoFile": "(${1:string value})",
  "isWDDX": "(${1:object value})",
  "isXML": "(${1:string value})",
  "isXMLAttribute": "(${1:object value})",
  "isXMLDoc": "(${1:object value})",
  "isXMLElem": "(${1:object value})",
  "isXMLNode": "(${1:object value})",
  "isXMLRoot": "(${1:object value})",
  "isZipFile": "(${1:string path})",
  "javacast": "(${1:string type}, ${2:string variable})",
  "jsStringFormat": "(${1:string String})",
  "lCase": "(${1:string String})",
  "left": "(${1:string String}, ${2:numeric count})",
  "len": "(${1:object Object})",
  "listAppend": "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})",
  "listAvg": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean multiCharacterDelimiter}})",
  "listChangeDelims": "(${1:string list}, ${2:string new_delimiter}${3:, ${4:string delimiters}})",
  "listCompact": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean multiCharacterDelimiter}})",
  "listContains": "(${1:string list}, ${2:string substring}${3:, ${4:string delimiters}})",
  "listContainsNoCase": "(${1:string list}, ${2:string substring}${3:, ${4:string delimiters}})",
  "listDeleteAt": "(${1:string list}, ${2:numeric position}${3:, ${4:string delimiters}})",
  "listEach": "(${1: str}, ${2: function}, ${3: delim}${4:, ${5: includeEmptyFields}})",
  "listEvery": "(${1:string list}, ${2:function closure}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:number maxThreads}})",
  "listFilter": "(${1:list list}, ${2:closure function})",
  "listFind": "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:string includeEmptyValues}})",
  "listFindNoCase": "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:string includeEmptyValues}})",
  "listFirst": "(${1:string list}${2:, ${3:string delimiters}})",
  "listGetAt": "(${1:string list}, ${2:numeric position}${3:, ${4:string delimiters}})",
  "listIndexExists": "(${1:string list}, ${2:number index}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}})",
  "listInsertAt": "(${1:string list}, ${2:numeric position}, ${3:string value}${4:, ${5:string delimiters}})",
  "listItemTrim": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})",
  "listLast": "(${1:string list}${2:, ${3:string delimiters}})",
  "listLen": "(${1:string list}${2:, ${3:string delimiters}})",
  "listMap": "(${1:string list}, ${2:any function}, ${3:any intialValue}, ${4:string delimiter}, ${5:boolean includeEmptyFields})",
  "listPrepend": "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})",
  "listQualify": "(${1:string list}, ${2:string qualifier}${3:, ${4:string delimiters}}${5:, ${6:string elements}}${7:, ${8:boolean includeEmptyFields}})",
  "listReduce": "(${1:string list}, ${2:any function}, ${3:any intialValue}, ${4:string delimiter}, ${5:boolean includeEmptyFields})",
  "listRemoveDuplicates": "(${1:string list}${2:, ${3:string delimiter}}${4:, ${5:boolean ignoreCase}})",
  "listRest": "(${1:string list}${2:, ${3:string delimiters}})",
  "listSetAt": "(${1:string list}, ${2:numeric position}, ${3:string value}${4:, ${5:string delimiters}})",
  "listSome": "(${1:string list}, ${2:function closure}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:number maxThreads}})",
  "listSort": "(${1:string list}, ${2:string sort_type}${3:, ${4:string sort_order}}${5:, ${6:string delimiters}})",
  "listToArray": "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}})",
  "listTrim": "(${1:string list}${2:, ${3:string delimiters}})",
  "listValueCount": "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})",
  "listValueCountNoCase": "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})",
  "lJustify": "(${1:string String}, ${2:numeric length})",
  "location": "(${1:string url}${2:, ${3:boolean addtoken}}${4:, ${5:numeric statuscode}})",
  "log": "(${1:numeric number})",
  "log10": "(${1:numeric number})",
  "LSCurrencyFormat": "(${1:numeric number}${2:, ${3:string type}})",
  "LSDateFormat": "(${1:datetime date}${2:, ${3:string mask}})",
  "LSDateTimeFormat": "(${1: date}${2:, ${3: mask}}, ${4: timeZone}${5:, ${6: locale}})",
  "LSDayOfWeek": "(${1:datetime date}${2:, ${3:string locale}}${4:, ${5:string timezone}})",
  "LSEuroCurrencyFormat": "(${1:string currency}, ${2:string type})",
  "LSIsCurrency": "(${1:string String})",
  "LSIsDate": "(${1:string String})",
  "LSIsNumeric": "(${1:string String})",
  "LSNumberFormat": "(${1:numeric number}${2:, ${3:string mask}})",
  "LSParseCurrency": "(${1:string String})",
  "LSParseDateTime": "(${1:string dt_string})",
  "LSParseEuroCurrency": "(${1:string currency_string})",
  "LSParseNumber": "(${1:string String})",
  "LSTimeFormat": "(${1:datetime time}${2:, ${3:string mask}})",
  "LSWeek": "(${1:datetime date}${2:, ${3:string locale}}${4:, ${5:string timezone}})",
  "lTrim": "(${1:string String})",
  "max": "(${1:numeric number1}, ${2:numeric number2})",
  "metaphone": "(${1:string str})",
  "mid": "(${1:string String}, ${2:numeric start}, ${3:numeric count})",
  "millisecond": "(${1:datetime date}${2:, ${3:string timezone}})",
  "min": "(${1:numeric number1}, ${2:numeric number2})",
  "minute": "(${1:datetime date})",
  "month": "(${1:datetime date})",
  "monthAsString": "(${1:numeric month_number})",
  "monthShortAsString": "(${1:number monthnumber})",
  "newLine": "()",
  "now": "()",
  "nowServer": "()",
  "nullValue": "()",
  "numberFormat": "(${1:numeric number}${2:, ${3:string mask}})",
  "objectEquals": "(${1: Param1}, ${2: Param2})",
  "objectload": "(${1: binaryObject})",
  "objectSave": "(${1:variablename object}${2:, ${3:string file}})",
  "onApplicationEnd": "(${1:struct ApplicationScope})",
  "onApplicationStart": "()",
  "onError": "(${1:struct exception}, ${2:string eventName})",
  "onMissingMethod": "(${1:string missingMethodName}, ${2:struct missingMethodArguments})",
  "onMissingTemplate": "(${1:string targetPage})",
  "onRequest": "(${1:string targetPage})",
  "onRequestEnd": "(${1:string targetPage})",
  "onRequestStart": "(${1:string targetPage})",
  "onSessionEnd": "(${1:struct sessionScope}, ${2:struct applicationScope})",
  "onSessionStart": "()",
  "ORMClearSession": "()",
  "ORMCloseAllSessions": "(${1: region})",
  "ORMCloseSession": "()",
  "ORMEvictCollection": "(${1:string componentName}, ${2:string relationName}${3:, ${4:string id}})",
  "ORMEvictEntity": "(${1:string componentName}${2:, ${3:string id}})",
  "ORMEvictQueries": "(${1:string cacheName})",
  "ORMExecuteQuery": "(${1:string hql}${2:, ${3:any params}}${4:, ${5:boolean unique}}${6:, ${7:string queryoptions}})",
  "ORMFlush": "()",
  "ORMFlushAll": "(${1: region})",
  "ORMGetSession": "()",
  "ORMGetSessionFactory": "()",
  "ORMIndex": "()",
  "ORMIndexPurge": "(${1: region})",
  "ORMReload": "()",
  "ORMSearch": "(${1: query_text}, ${2: entityName}, ${3: fields}, ${4: optionMap})",
  "ORMSearchOffline": "(${1: query_text}, ${2: entityName}, ${3: fieldss_to_be_selected}, ${4: fields}${5:, ${6: optionMap}}${7:, ${8: extra options}})",
  "pagePoolClear": "()",
  "pagePoolList": "()",
  "paragraphFormat": "(${1:string String})",
  "parameterExists": "(${1: region})",
  "parseDateTime": "(${1:string dt_string}${2:, ${3:string pop_conversion}})",
  "parseNumber": "(${1:string nummber}${2:, ${3:string radix}})",
  "pi": "()",
  "precisionEvaluate": "(${1:string expressions})",
  "preserveSingleQuotes": "(${1:string variable})",
  "quarter": "(${1:datetime date})",
  "query": "()",
  "queryAddColumn": "(${1:query query}, ${2:string column_name}${3:, ${4:string datatype}}, ${5:array array_name})",
  "queryAddRow": "(${1:query query}${2:, ${3:numeric / array / struct number/row(s)}})",
  "queryColumnArray": "(${1:query query})",
  "queryColumnCount": "(${1:query query})",
  "queryColumnData": "(${1:query query}, ${2:string columnName}${3:, ${4:function closure}})",
  "queryColumnExists": "(${1:query query}, ${2:string column})",
  "queryColumnList": "(${1:query query}${2:, ${3:string delimiter}})",
  "queryConvertForGrid": "(${1:string query}, ${2:numeric page}, ${3:numeric pageSize})",
  "queryCurrentRow": "(${1:query query})",
  "queryDeleteColumn": "(${1:query query}, ${2:string column})",
  "queryDeleteRow": "(${1:query query}${2:, ${3:number row}})",
  "queryEach": "(${1:query query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "queryEvery": "(${1:query query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "queryExecute": "(${1:string sql}, ${2:any params}, ${3:struct options})",
  "queryFilter": "(${1:query query}, ${2:function filter}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "queryGetCell": "(${1:query query}, ${2:string column_name}${3:, ${4:number row_number}})",
  "queryGetRow": "(${1: query}, ${2: rowNumber})",
  "queryMap": "(${1:query query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "queryNew": "(${1:string columnList}${2:, ${3:string columnTypeList}}${4:, ${5:any rowData}})",
  "queryRecordCount": "(${1:query query})",
  "queryReduce": "(${1:query query}, ${2:function closure}${3:, ${4:object initalValue}})",
  "queryRowData": "(${1:query query}, ${2:number rowNumber})",
  "querySetCell": "(${1:query query}, ${2:string column}, ${3:object value}${4:, ${5:numeric row}})",
  "querySlice": "(${1:query query}, ${2:number offset}${3:, ${4:number length}})",
  "querySome": "(${1:query query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "querySort": "(${1:query query}, ${2:string column_name}${3:, ${4:string direction}})",
  "quotedValueList": "(${1:querycolumn column}${2:, ${3:string delimiter}})",
  "rand": "(${1:string algorithm})",
  "randomize": "(${1:numeric number}${2:, ${3:string algorithm}})",
  "randRange": "(${1:numeric number1}, ${2:numeric number2}${3:, ${4:string algorithm}})",
  "REEscape": "(${1: string})",
  "REFind": "(${1:regex reg_expression}, ${2:string String}${3:, ${4:numeric start}}${5:, ${6:boolean returnsubexpressions}})",
  "REFindNoCase": "(${1:regex reg_expression}, ${2:string String}${3:, ${4:numeric start}}${5:, ${6:boolean returnsubexpressions}})",
  "releaseCOMObject": "(${1:object objectName})",
  "REmatch": "(${1:string reg_expression}, ${2:string string})",
  "REMatchNoCase": "(${1:string reg_expression}, ${2:string string})",
  "removeCachedQuery": "(${1: SQL}, ${2: datasource}${3:, ${4: params}}${5:, ${6: region}})",
  "removeChars": "(${1:string String}, ${2:numeric start}, ${3:numeric count})",
  "repeatString": "(${1:string String}, ${2:numeric count})",
  "replace": "(${1:string String}, ${2:string substring1}, ${3:string substring2}${4:, ${5:string scope}})",
  "replaceList": "(${1:string String}, ${2:string list1}, ${3:string list2})",
  "replaceNoCase": "(${1:string String}, ${2:string substring1}, ${3:string substring2}${4:, ${5:string scope}})",
  "REReplace": "(${1:string string}, ${2:regex regex}, ${3:string substring}${4:, ${5:string scope}})",
  "REReplaceNoCase": "(${1:string String}, ${2:regex reg_expression}, ${3:string substring}${4:, ${5:string scope}})",
  "restDeleteApplication": "(${1: dirPath})",
  "restInitApplication": "(${1:string dirPath}, ${2:string serviceMapping}${3:, ${4:string default}}, ${5:string password})",
  "restSetResponse": "(${1: response})",
  "reverse": "(${1:string String})",
  "right": "(${1:string String}, ${2:numeric count})",
  "rJustify": "(${1:string String}, ${2:numeric length})",
  "round": "(${1:numeric number})",
  "rTrim": "(${1:string String})",
  "second": "(${1:datetime date})",
  "sendGatewayMessage": "(${1:string gatewayID}, ${2:struct data})",
  "serialize": "(${1: objToBeSerialized}, ${2: type}, ${3: useCustomSerializer})",
  "serializeJSON": "(${1:variablename var}${2:, ${3:boolean serializeQueryByColumns}}, ${4:boolean useCustomSerializer})",
  "serializeXML": "(${1: objToBeSerialized}, ${2: useCustomSerializer})",
  "sessionGetMetadata": "(${1: region})",
  "sessionInvalidate": "()",
  "sessionRotate": "()",
  "sessionstartTime": "()",
  "setEncoding": "(${1:string scope_name}, ${2:string charset})",
  "setLocale": "(${1:string new_locale})",
  "setProfileString": "(${1:string inipath}, ${2:string section}, ${3:string entry}, ${4:string value})",
  "setTimezone": "(${1:string timezone})",
  "setVariable": "(${1:string name}, ${2:string value})",
  "sgn": "(${1:numeric number})",
  "sin": "(${1:numeric number})",
  "sizeOf": "(${1:object obj}${2:, ${3:boolean complex}})",
  "sleep": "(${1: duration})",
  "soundEx": "(${1:string str})",
  "spanExcluding": "(${1:string String}, ${2:string set})",
  "spanIncluding": "(${1:string String}, ${2:string set})",
  "spreadsheetAddAutoFilter": "(${1:any spreadsheetObj}, ${2:string autofilter})",
  "spreadsheetAddColumn": "(${1:variablename spreadsheetObj}, ${2:string data}, ${3:numeric startrow}, ${4:numeric startcolumn}, ${5:boolean insert}${6:, ${7:boolean insert}})",
  "spreadsheetAddFreezePane": "(${1:variablename spreadsheetObj}, ${2:numeric column}, ${3:numeric row}${4:, ${5:numeric endColumn}}${6:, ${7:numeric endRow}})",
  "spreadsheetAddimage": "(${1:variablename spreadsheetObj}, ${2:string imagefilepath}, ${3:string anchor})",
  "spreadsheetAddInfo": "(${1:variablename spreadsheetObj}, ${2:struct info})",
  "spreadsheetAddPagebreaks": "(${1:any SpreadsheetObj}, ${2:string rowbreaks}, ${3:string colbreaks})",
  "spreadsheetAddRow": "(${1:variablename spreadsheetObj}, ${2:string data}${3:, ${4:numeric row}}${5:, ${6:numeric column}}${7:, ${8:boolean insert}})",
  "spreadsheetAddRows": "(${1:variablename spreadsheetObj}, ${2:string data}, ${3:numeric row}${4:, ${5:boolean insert}})",
  "spreadsheetAddSplitPane": "(${1:variablename spreadsheetObj}, ${2:numeric x}, ${3:numeric y}, ${4:numeric splitColumn}, ${5:numeric splitRow}${6:, ${7:string position}})",
  "spreadsheetCreateSheet": "(${1:variablename spreadsheetObj}, ${2:string name})",
  "spreadsheetDeleteColumn": "(${1:variablename spreadsheetObj}, ${2:numeric column})",
  "spreadsheetDeleteColumns": "(${1:variablename spreadsheetObj}, ${2:numeric range})",
  "spreadsheetDeleteRow": "(${1:variablename spreadsheetObj}, ${2:numeric row})",
  "spreadsheetDeleteRows": "(${1:variablename spreadsheetObj}, ${2:numeric range})",
  "spreadsheetFormatCell": "(${1:variablename spreadsheetObj}, ${2:string format}, ${3:numeric row}, ${4:numeric column})",
  "spreadsheetFormatCellRange": "(${1: spreadsheetObj}, ${2: format}, ${3: startRow}, ${4: startColumn}, ${5: endRow}, ${6: endColumn})",
  "spreadsheetFormatColumn": "(${1:variablename spreadsheetObj}, ${2:string format}, ${3:numeric column})",
  "spreadsheetFormatColumns": "(${1:variablename spreadsheetObj}, ${2:string format}, ${3:string columns})",
  "spreadsheetFormatRow": "(${1:variablename spreadsheetObj}, ${2:string format}, ${3:numeric row})",
  "spreadsheetFormatRows": "(${1:variablename spreadsheetObj}, ${2:string format}, ${3:numeric row})",
  "spreadsheetGetCellComment": "(${1:string author}${2:, ${3:numeric column}}${4:, ${5:string comment}}${6:, ${7:string row}})",
  "spreadsheetGetCellFormula": "(${1:variablename spreadsheetObj}, ${2:numeric row}, ${3:numeric column})",
  "spreadsheetGetCellValue": "(${1:variablename spreadsheetObj}, ${2:string row}, ${3:string column})",
  "spreadsheetInfo": "(${1:variablename spreadsheetObj})",
  "spreadsheetMergeCells": "(${1:variablename spreadsheetObj}, ${2:numeric startrow}, ${3:numeric endrow}, ${4:numeric startcolumn}, ${5:numeric endcolumn})",
  "spreadsheetNew": "(${1:string sheetname}${2:, ${3:boolean xmlFormat}})",
  "spreadsheetRead": "(${1:string fileName}, ${2:variablename spreadsheetObj})",
  "spreadsheetReadBinary": "(${1:variablename spreadsheetObj})",
  "spreadsheetRemoveSheet": "(${1: spreadsheetObj}, ${2: sheetname})",
  "spreadsheetSetActiveSheet": "(${1:variablename spreadsheetObj}${2:, ${3:string name}})",
  "spreadsheetSetActiveSheetNumber": "(${1:variablename spreadsheetObj}${2:, ${3:number number}})",
  "spreadsheetSetCellComment": "(${1:variablename spreadsheetObj}, ${2:string comment}, ${3:numeric row}, ${4:numeric column})",
  "spreadsheetSetCellFormula": "(${1:variablename spreadsheetObj}, ${2:string formula}, ${3:numeric row}, ${4:numeric column})",
  "spreadsheetSetCellValue": "(${1:variablename spreadsheetObj}, ${2:string value}, ${3:numeric row}, ${4:numeric column})",
  "spreadsheetSetColumnWidth": "(${1:variablename spreadsheetObj}, ${2:numeric columnNumber}, ${3:numeric width})",
  "spreadsheetSetFooter": "(${1:variablename spreadsheetObj}, ${2:string leftFooter}, ${3:string centerFooter}, ${4:string rightFooter})",
  "spreadsheetSetHeader": "(${1:variablename spreadsheetObj}, ${2:string leftHeader}, ${3:string centerHeader}, ${4:string rightHeader})",
  "spreadsheetSetRowHeight": "(${1:variablename spreadsheetObj}, ${2:numeric rowNumber}, ${3:numeric height})",
  "spreadsheetShiftColumns": "(${1:variablename spreadsheetObj}, ${2:numeric start}${3:, ${4:numeric end}}${5:, ${6:numeric start}})",
  "spreadsheetShiftRows": "(${1:variablename spreadsheetObj}, ${2:numeric start}, ${3:numeric end}${4:, ${5:numeric rows}})",
  "spreadsheetwrite": "(${1:variablename spreadsheetObj}, ${2:string fileName}${3:, ${4:string password}}${5:, ${6:boolean overwrite}})",
  "sqr": "(${1:numeric number})",
  "SSLCertificateInstall": "(${1:string host}${2:, ${3:number port}})",
  "SSLCertificateList": "(${1:string host}${2:, ${3:number port}})",
  "storeAddACL": "(${1: url}, ${2: ACLObject})",
  "storeGetACL": "(${1: ulr}, ${2: ACLObject})",
  "storeGetMetadata": "(${1: url})",
  "storeSetACL": "(${1: url}, ${2: ACLObject})",
  "storeSetMetadata": "(${1: url}, ${2: region})",
  "stringLen": "(${1:string string})",
  "stripCR": "(${1:string String})",
  "structAppend": "(${1:struct destStruct}, ${2:struct sourceStruct}${3:, ${4:boolean overwriteFlag}})",
  "structClear": "(${1:struct structure})",
  "structCopy": "(${1:struct structure})",
  "structCount": "(${1:struct structure})",
  "structDelete": "(${1:string structure}, ${2:string key}${3:, ${4:boolean indicateNotExisting}})",
  "structEach": "(${1:string structure}, ${2:udf callback})",
  "structEvery": "(${1:struct struct}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "structFilter": "(${1:struct structure}, ${2:function function})",
  "structFind": "(${1:struct structure}, ${2:string key})",
  "structFindKey": "(${1:object top}, ${2:string value}, ${3:string scope})",
  "structFindValue": "(${1:object top}, ${2:string value}${3:, ${4:string scope}})",
  "structGet": "(${1:string path})",
  "structInsert": "(${1:struct structure}, ${2:string key}, ${3:object value}${4:, ${5:boolean allowoverwrite}})",
  "structIsEmpty": "(${1:struct structure})",
  "structKeyArray": "(${1:struct structure})",
  "structKeyExists": "(${1:struct structure}, ${2:string key})",
  "structKeyList": "(${1:struct structure}${2:, ${3:string delimiter}})",
  "structKeyTranslate": "(${1:struct structure}${2:, ${3:boolean deepTranslation}}${4:, ${5:boolean leaveOriginalKey}})",
  "structMap": "(${1:struct struct}, ${2:any function})",
  "structNew": "()",
  "structReduce": "(${1:struct struct}, ${2:any function}, ${3:any initialVal})",
  "structSome": "(${1:struct struct}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:number maxThreads}})",
  "structSort": "(${1:struct base}, ${2:string sorttype}, ${3:string sortorder}, ${4:string pathtosubelement})",
  "structUpdate": "(${1:struct structure}, ${2:string key}, ${3:object value})",
  "systemCacheClear": "(${1:string cacheName})",
  "systemOutput": "(${1:object obj}${2:, ${3:boolean addNewLine}}${4:, ${5:boolean doErrorStream}})",
  "tan": "(${1:numeric number})",
  "threadJoin": "(${1: Param1})",
  "threadTerminate": "(${1:string threadname})",
  "throw": "(${1:string type}${2:, ${3:string message}}${4:, ${5:string detail}}${6:, ${7:string errorcode}}${8:, ${9:string extendedinfo}}${10:, ${11:object object}})",
  "timeFormat": "(${1:datetime time}${2:, ${3:string mask}})",
  "toBase64": "(${1:object string_or_object}${2:, ${3:string encoding}})",
  "toBinary": "(${1:object base64_or_object})",
  "toNumeric": "(${1:any value}${2:, ${3:any radix}})",
  "toScript": "(${1:object cfvar}, ${2:string javascriptvar}${3:, ${4:boolean outputformat}}${5:, ${6:boolean asformat}})",
  "toString": "(${1:object any_value}${2:, ${3:string encoding}})",
  "trace": "(${1:boolean abort}${2:, ${3:string category}}${4:, ${5:boolean inline}}${6:, ${7:string text}}${8:, ${9:string type}}${10:, ${11:string var}})",
  "transactionCommit": "()",
  "transactionRollback": "(${1:string savepoint})",
  "transactionSetSavepoint": "(${1:string savepoint})",
  "trim": "(${1:string String})",
  "trueFalseFormat": "(${1:any value})",
  "uCase": "(${1:string String})",
  "UCFirst": "(${1:string string}${2:, ${3:boolean doAll}}${4:, ${5:boolean doLowerIfAllUppercase}})",
  "unserializeJava": "(${1:string string})",
  "URLDecode": "(${1:string urlencodedstring}${2:, ${3:string charset}})",
  "urlEncode": "(${1:string string}${2:, ${3:string charset}}${4:, ${5:boolean force}})",
  "URLEncodedFormat": "(${1:string String}${2:, ${3:string charset}})",
  "URLSessionFormat": "(${1:url requesturl})",
  "val": "(${1:string String})",
  "valueArray": "(${1:querycolumn query_column})",
  "valueList": "(${1:querycolumn column}${2:, ${3:string delimiter}})",
  "verifyClient": "()",
  "week": "(${1:datetime date})",
  "wrap": "(${1:string String}, ${2:numeric limit}${3:, ${4:boolean strip}})",
  "writeBody": "()",
  "writeDump": "(${1:variablename var}${2:, ${3:boolean expand}}${4:, ${5:string format}}${6:, ${7:boolean abort}}${8:, ${9:string hide}}${10:, ${11:numeric keys}}${12:, ${13:string label}}${14:, ${15:boolean metainfo}}${16:, ${17:string output}}${18:, ${19:string show}}${20:, ${21:boolean showUDfs}}${22:, ${23:numeric top}})",
  "writeLog": "(${1:string text}${2:, ${3:string log}}${4:, ${5:string file}}${6:, ${7:string type}}${8:, ${9:boolean application}})",
  "writeOutput": "(${1:string String})",
  "WSGetAllChannels": "(${1: channelName})",
  "WSGetSubscribers": "(${1: channel})",
  "WSPublish": "(${1: channel}, ${2: message}${3:, ${4: filterCriteria}})",
  "WSSendMessage": "(${1: message})",
  "XMLChildPos": "(${1:node elem}, ${2:string childname}, ${3:numeric n})",
  "XMLElemNew": "(${1:object xmlobj}${2:, ${3:string namespace}}, ${4:string childname})",
  "XMLFormat": "(${1:string String}${2:, ${3:boolean escapeNewSet}})",
  "XMLGetNodeType": "(${1:object xmlNode})",
  "XMLNew": "(${1:boolean casesensitive})",
  "XMLParse": "(${1:string xmlString}${2:, ${3:boolean caseSensitive}}${4:, ${5:string validator}})",
  "XMLSearch": "(${1:object xmldoc}, ${2:string xpathstring})",
  "XMLTransform": "(${1:string xml}, ${2:string xsl}${3:, ${4:struct parameters}})",
  "XMLValidate": "(${1:object xmlDoc}${2:, ${3:string validator}})",
  "year": "(${1:datetime date})",
  "yesNoFormat": "(${1:boolean value})"
}