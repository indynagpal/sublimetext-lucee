{
	"array": {
		"append": "(${1:any value}${2:, ${3:boolean merge}})",
		"avg": "()",
		"clear": "()",
		"contains": "(${1:object needle}${2:, ${3:boolean substringMatch}})",
		"containsNoCase": "(${1:object needle})",
		"delete": "(${1:object value}${2:, ${3:string scope}})",
		"deleteAt": "(${1:number position})",
		"each": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"every": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"filter": "(${1:function filter}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"find": "(${1:any value_or_closure})",
		"findAll": "(${1:any value_or_closure})",
		"findAllNoCase": "(${1:any value})",
		"findNoCase": "(${1:any value})",
		"first": "()",
		"indexExists": "(${1:number index})",
		"insertAt": "(${1:number position}, ${2:any value})",
		"isDefined": "(${1:number index})",
		"isEmpty": "()",
		"last": "()",
		"len": "()",
		"map": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"max": "()",
		"median": "()",
		"merge": "(${1:array array2}${2:, ${3:boolean leaveIndex}})",
		"mid": "(${1:number start}${2:, ${3:number count}})",
		"min": "()",
		"prepend": "(${1:any value})",
		"reduce": "(${1:function closure}${2:, ${3:object initalValue}})",
		"resize": "(${1:number minimum_size})",
		"reverse": "()",
		"set": "(${1:number start_pos}, ${2:number end_pos}, ${3:any value})",
		"slice": "(${1:number offset}${2:, ${3:number length}})",
		"some": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"sort": "(${1:object sorttype_or_closure}${2:, ${3:string sort_order}}${4:, ${5:boolean locale_sensitive}})",
		"sum": "()",
		"swap": "(${1:number position1}, ${2:number position2})",
		"toList": "(${1:string delimiter})",
		"toStruct": "()"
	},
	"struct": {
		"append": "(${1:struct Struct2}${2:, ${3:boolean OverwriteFlag}})",
		"clear": "()",
		"copy": "()",
		"count": "()",
		"delete": "(${1:string key}${2:, ${3:boolean indicatenotexisting}})",
		"each": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"every": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"filter": "(${1:function filter}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"find": "(${1:string key}${2:, ${3:any defaultValue}})",
		"findKey": "(${1:string Key}${2:, ${3:string Scope}})",
		"findValue": "(${1:string Key}${2:, ${3:string Scope}})",
		"get": "(${1:string path})",
		"insert": "(${1:string key}, ${2:any value}${3:, ${4:boolean allowoverwrite}})",
		"isEmpty": "()",
		"keyArray": "()",
		"keyExists": "(${1:string key})",
		"keyList": "(${1:string delimiter})",
		"keyTranslate": "(${1:boolean deepTranslation}${2:, ${3:boolean leaveOriginalKey}})",
		"map": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"reduce": "(${1:function closure}${2:, ${3:object initalValue}})",
		"some": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"sort": "(${1:string sortType}${2:, ${3:string sortOrder}}${4:, ${5:string pathToSubElement}})",
		"update": "(${1:string key}, ${2:any value})"
	},
	"query": {
		"addColumn": "(${1:string column}${2:, ${3:any datatype_or_array}}${4:, ${5:any array}})",
		"addRow": "(${1:any numberOrData})",
		"columnArray": "()",
		"columnCount": "()",
		"columnData": "(${1:string columnName}${2:, ${3:function closure}})",
		"columnExists": "(${1:string column})",
		"columnList": "(${1:string delimiter})",
		"currentRow": "()",
		"deleteColumn": "(${1:String column})",
		"deleteRow": "(${1:number row})",
		"each": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"every": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"filter": "(${1:function filter}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"getCell": "(${1:string column_name}${2:, ${3:number row_number}})",
		"getRow": "(${1:number rowNumber})",
		"map": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"recordCount": "()",
		"reduce": "(${1:function closure}${2:, ${3:object initalValue}})",
		"rowData": "(${1:number rowNumber})",
		"setCell": "(${1:string column_name}, ${2:any value}${3:, ${4:number row_number}})",
		"slice": "(${1:number offset}${2:, ${3:number length}})",
		"some": "(${1:function closure}${2:, ${3:boolean parallel}}${4:, ${5:number maxThreads}})",
		"sort": "(${1:string column_name}${2:, ${3:string direction}})"
	}
}